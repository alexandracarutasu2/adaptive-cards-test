{"id":"../../node_modules/adaptivecards/lib/serialization.js","dependencies":[{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js.map","includedInParent":true,"mtime":1689085533852},{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\src\\serialization.ts","includedInParent":true,"mtime":1689085534050},{"name":"C:\\Users\\t-acruau\\adaptive-cards\\package.json","includedInParent":true,"mtime":1689259513501},{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\package.json","includedInParent":true,"mtime":1689085533782},{"name":"./shared","loc":{"line":21,"column":23,"index":1469},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\shared.js"},{"name":"./utils","loc":{"line":22,"column":20,"index":1502},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\utils.js"},{"name":"./enums","loc":{"line":23,"column":20,"index":1534},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\enums.js"},{"name":"./strings","loc":{"line":24,"column":24,"index":1570},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\strings.js"}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SerializableObject = exports.property = exports.SerializableObjectSchema = exports.CustomProperty = exports.SerializableObjectCollectionProperty = exports.SerializableObjectProperty = exports.EnumProperty = exports.ValueSetProperty = exports.StringArrayProperty = exports.PixelSizeProperty = exports.NumProperty = exports.BoolProperty = exports.StringProperty = exports.PropertyDefinition = exports.BaseSerializationContext = exports.isVersionLessOrEqual = exports.Versions = exports.Version = void 0;\n// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar shared_1 = require(\"./shared\");\nvar Utils = require(\"./utils\");\nvar Enums = require(\"./enums\");\nvar strings_1 = require(\"./strings\");\nvar Version = /** @class */ (function () {\n    function Version(major, minor, label) {\n        if (major === void 0) { major = 1; }\n        if (minor === void 0) { minor = 1; }\n        this._isValid = true;\n        this._major = major;\n        this._minor = minor;\n        this._label = label;\n    }\n    Version.parse = function (versionString, context) {\n        if (!versionString) {\n            return undefined;\n        }\n        var result = new Version();\n        result._versionString = versionString;\n        var regEx = /(\\d+).(\\d+)/gi;\n        var matches = regEx.exec(versionString);\n        if (matches != null && matches.length === 3) {\n            result._major = parseInt(matches[1]);\n            result._minor = parseInt(matches[2]);\n        }\n        else {\n            result._isValid = false;\n        }\n        if (!result._isValid) {\n            context.logParseEvent(undefined, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidVersionString(result._versionString));\n        }\n        return result;\n    };\n    Version.prototype.toString = function () {\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n    };\n    Version.prototype.toJSON = function () {\n        return this.toString();\n    };\n    Version.prototype.compareTo = function (otherVersion) {\n        if (!this.isValid || !otherVersion.isValid) {\n            throw new Error(\"Cannot compare invalid version.\");\n        }\n        if (this.major > otherVersion.major) {\n            return 1;\n        }\n        else if (this.major < otherVersion.major) {\n            return -1;\n        }\n        else if (this.minor > otherVersion.minor) {\n            return 1;\n        }\n        else if (this.minor < otherVersion.minor) {\n            return -1;\n        }\n        return 0;\n    };\n    Object.defineProperty(Version.prototype, \"label\", {\n        get: function () {\n            return this._label ? this._label : this.toString();\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Version.prototype, \"major\", {\n        get: function () {\n            return this._major;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Version.prototype, \"minor\", {\n        get: function () {\n            return this._minor;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Version.prototype, \"isValid\", {\n        get: function () {\n            return this._isValid;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return Version;\n}());\nexports.Version = Version;\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nvar Versions = /** @class */ (function () {\n    function Versions() {\n    }\n    // If preview tag is added/removed from any version,\n    // don't forget to update .ac-schema-version-1-?::after too in adaptivecards-site\\themes\\adaptivecards\\source\\css\\style.css\n    /* eslint-enable @typescript-eslint/naming-convention */\n    Versions.getAllDeclaredVersions = function () {\n        var ctor = Versions;\n        var properties = [];\n        for (var propertyName in ctor) {\n            if (propertyName.match(/^v[0-9_]*$/)) {\n                // filter latest\n                try {\n                    var propertyValue = ctor[propertyName];\n                    if (propertyValue instanceof Version) {\n                        properties.push(propertyValue);\n                    }\n                }\n                catch (_a) {\n                    // If a property happens to have a getter function and\n                    // it throws an exception, we need to catch it here\n                }\n            }\n        }\n        return properties.sort(function (v1, v2) { return v1.compareTo(v2); });\n    };\n    /* eslint-disable @typescript-eslint/naming-convention */\n    Versions.v1_0 = new Version(1, 0);\n    Versions.v1_1 = new Version(1, 1);\n    Versions.v1_2 = new Version(1, 2);\n    Versions.v1_3 = new Version(1, 3);\n    Versions.v1_4 = new Version(1, 4);\n    Versions.v1_5 = new Version(1, 5);\n    Versions.v1_6 = new Version(1, 6);\n    Versions.latest = Versions.v1_6;\n    return Versions;\n}());\nexports.Versions = Versions;\nfunction isVersionLessOrEqual(version, targetVersion) {\n    if (version instanceof Version) {\n        if (targetVersion instanceof Version) {\n            return targetVersion.compareTo(version) >= 0;\n        }\n        else {\n            // Target version is *\n            return true;\n        }\n    }\n    else {\n        // Version is *\n        return true;\n    }\n}\nexports.isVersionLessOrEqual = isVersionLessOrEqual;\nvar BaseSerializationContext = /** @class */ (function () {\n    function BaseSerializationContext(targetVersion) {\n        if (targetVersion === void 0) { targetVersion = Versions.latest; }\n        this._validationEvents = [];\n        this.targetVersion = targetVersion;\n    }\n    BaseSerializationContext.prototype.isTemplateString = function (value) {\n        if (typeof value === \"string\") {\n            return value.startsWith(\"${\");\n        }\n        else {\n            return false;\n        }\n    };\n    BaseSerializationContext.prototype.tryDeleteValue = function (target, propertyName) {\n        if (!shared_1.GlobalSettings.enableFullJsonRoundTrip) {\n            delete target[propertyName];\n        }\n    };\n    BaseSerializationContext.prototype.tryDeleteDefaultValue = function (target, propertyName) {\n        if (!shared_1.GlobalSettings.enableFullJsonRoundTrip || !this.isTemplateString(target[propertyName])) {\n            delete target[propertyName];\n        }\n    };\n    BaseSerializationContext.prototype.serializeValue = function (target, propertyName, propertyValue, defaultValue, forceDeleteIfNullOrDefault) {\n        if (defaultValue === void 0) { defaultValue = undefined; }\n        if (forceDeleteIfNullOrDefault === void 0) { forceDeleteIfNullOrDefault = false; }\n        if (propertyValue === null ||\n            propertyValue === undefined) {\n            if (!shared_1.GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\n                delete target[propertyName];\n            }\n        }\n        else if (propertyValue === defaultValue) {\n            if (!shared_1.GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault || !this.isTemplateString(target[propertyName])) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    };\n    BaseSerializationContext.prototype.serializeString = function (target, propertyName, propertyValue, defaultValue) {\n        if (propertyValue === null ||\n            propertyValue === undefined) {\n            this.tryDeleteValue(target, propertyName);\n        }\n        else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    };\n    BaseSerializationContext.prototype.serializeBool = function (target, propertyName, propertyValue, defaultValue) {\n        if (propertyValue === null ||\n            propertyValue === undefined) {\n            this.tryDeleteValue(target, propertyName);\n        }\n        else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    };\n    BaseSerializationContext.prototype.serializeNumber = function (target, propertyName, propertyValue, defaultValue) {\n        if (propertyValue === null ||\n            propertyValue === undefined ||\n            isNaN(propertyValue)) {\n            this.tryDeleteValue(target, propertyName);\n        }\n        else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        }\n        else {\n            target[propertyName] = propertyValue;\n        }\n    };\n    BaseSerializationContext.prototype.serializeEnum = function (enumType, target, propertyName, propertyValue, defaultValue) {\n        if (defaultValue === void 0) { defaultValue = undefined; }\n        if (propertyValue === null ||\n            propertyValue === undefined) {\n            this.tryDeleteValue(target, propertyName);\n        }\n        else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        }\n        else {\n            target[propertyName] = enumType[propertyValue];\n        }\n    };\n    BaseSerializationContext.prototype.serializeArray = function (target, propertyName, propertyValue) {\n        var items = [];\n        if (propertyValue) {\n            for (var _i = 0, propertyValue_1 = propertyValue; _i < propertyValue_1.length; _i++) {\n                var item = propertyValue_1[_i];\n                var serializedItem = undefined;\n                if (item instanceof SerializableObject) {\n                    serializedItem = item.toJSON(this);\n                }\n                else if (item.toJSON) {\n                    serializedItem = item.toJSON();\n                }\n                else {\n                    serializedItem = item;\n                }\n                if (serializedItem !== undefined) {\n                    items.push(serializedItem);\n                }\n            }\n        }\n        if (items.length === 0) {\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n                delete target[propertyName];\n            }\n        }\n        else {\n            this.serializeValue(target, propertyName, items);\n        }\n    };\n    BaseSerializationContext.prototype.clearEvents = function () {\n        this._validationEvents = [];\n    };\n    BaseSerializationContext.prototype.logEvent = function (source, phase, event, message) {\n        this._validationEvents.push({\n            source: source,\n            phase: phase,\n            event: event,\n            message: message\n        });\n    };\n    BaseSerializationContext.prototype.logParseEvent = function (source, event, message) {\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n    };\n    BaseSerializationContext.prototype.getEventAt = function (index) {\n        return this._validationEvents[index];\n    };\n    Object.defineProperty(BaseSerializationContext.prototype, \"eventCount\", {\n        get: function () {\n            return this._validationEvents.length;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return BaseSerializationContext;\n}());\nexports.BaseSerializationContext = BaseSerializationContext;\nvar SimpleSerializationContext = /** @class */ (function (_super) {\n    __extends(SimpleSerializationContext, _super);\n    function SimpleSerializationContext() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return SimpleSerializationContext;\n}(BaseSerializationContext));\nvar PropertyDefinition = /** @class */ (function () {\n    function PropertyDefinition(targetVersion, name, defaultValue, onGetInitialValue) {\n        this.targetVersion = targetVersion;\n        this.name = name;\n        this.defaultValue = defaultValue;\n        this.onGetInitialValue = onGetInitialValue;\n        this.isSerializationEnabled = true;\n        this.sequentialNumber = PropertyDefinition._sequentialNumber;\n        PropertyDefinition._sequentialNumber++;\n    }\n    PropertyDefinition.prototype.getInternalName = function () {\n        return this.name;\n    };\n    PropertyDefinition.prototype.parse = function (sender, source, context) {\n        return source[this.name];\n    };\n    PropertyDefinition.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeValue(target, this.name, value, this.defaultValue);\n    };\n    PropertyDefinition._sequentialNumber = 0;\n    return PropertyDefinition;\n}());\nexports.PropertyDefinition = PropertyDefinition;\nvar StringProperty = /** @class */ (function (_super) {\n    __extends(StringProperty, _super);\n    function StringProperty(targetVersion, name, treatEmptyAsUndefined, regEx, defaultValue, onGetInitialValue) {\n        if (treatEmptyAsUndefined === void 0) { treatEmptyAsUndefined = true; }\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.treatEmptyAsUndefined = treatEmptyAsUndefined;\n        _this.regEx = regEx;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        return _this;\n    }\n    StringProperty.prototype.parse = function (sender, source, context) {\n        var parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n        var isUndefined = parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\n        if (!isUndefined && this.regEx !== undefined) {\n            var matches = this.regEx.exec(parsedValue);\n            if (!matches) {\n                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(parsedValue, this.name));\n                return undefined;\n            }\n        }\n        return parsedValue;\n    };\n    StringProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeString(target, this.name, value === \"\" && this.treatEmptyAsUndefined ? undefined : value, this.defaultValue);\n    };\n    return StringProperty;\n}(PropertyDefinition));\nexports.StringProperty = StringProperty;\nvar BoolProperty = /** @class */ (function (_super) {\n    __extends(BoolProperty, _super);\n    function BoolProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        return _this;\n    }\n    BoolProperty.prototype.parse = function (sender, source, context) {\n        return Utils.parseBool(source[this.name], this.defaultValue);\n    };\n    BoolProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeBool(target, this.name, value, this.defaultValue);\n    };\n    return BoolProperty;\n}(PropertyDefinition));\nexports.BoolProperty = BoolProperty;\nvar NumProperty = /** @class */ (function (_super) {\n    __extends(NumProperty, _super);\n    function NumProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        return _this;\n    }\n    NumProperty.prototype.parse = function (sender, source, context) {\n        return Utils.parseNumber(source[this.name], this.defaultValue);\n    };\n    NumProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeNumber(target, this.name, value, this.defaultValue);\n    };\n    return NumProperty;\n}(PropertyDefinition));\nexports.NumProperty = NumProperty;\nvar PixelSizeProperty = /** @class */ (function (_super) {\n    __extends(PixelSizeProperty, _super);\n    function PixelSizeProperty() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PixelSizeProperty.prototype.parse = function (sender, source, context) {\n        var result = undefined;\n        var value = source[this.name];\n        if (typeof value === \"string\") {\n            var isValid = false;\n            try {\n                var size = shared_1.SizeAndUnit.parse(value, true);\n                if (size.unit === Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n                    isValid = true;\n                }\n            }\n            catch (_a) {\n                // Do nothing. A parse error is emitted below\n            }\n            if (!isValid) {\n                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(source[this.name], this.name));\n            }\n        }\n        return result;\n    };\n    PixelSizeProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeValue(target, this.name, typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined);\n    };\n    return PixelSizeProperty;\n}(PropertyDefinition));\nexports.PixelSizeProperty = PixelSizeProperty;\nvar StringArrayProperty = /** @class */ (function (_super) {\n    __extends(StringArrayProperty, _super);\n    function StringArrayProperty(targetVersion, name, defaultValue, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        return _this;\n    }\n    StringArrayProperty.prototype.parse = function (sender, source, context) {\n        var sourceValue = source[this.name];\n        if (sourceValue === undefined || !Array.isArray(sourceValue)) {\n            return this.defaultValue;\n        }\n        var result = [];\n        for (var _i = 0, sourceValue_1 = sourceValue; _i < sourceValue_1.length; _i++) {\n            var value = sourceValue_1[_i];\n            if (typeof value === \"string\") {\n                result.push(value);\n            }\n            else {\n                context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, \"Invalid array value \\\"\".concat(JSON.stringify(value), \"\\\" of type \\\"\").concat(typeof value, \"\\\" ignored for \\\"\").concat(this.name, \"\\\".\"));\n            }\n        }\n        return result;\n    };\n    StringArrayProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeArray(target, this.name, value);\n    };\n    return StringArrayProperty;\n}(PropertyDefinition));\nexports.StringArrayProperty = StringArrayProperty;\nvar ValueSetProperty = /** @class */ (function (_super) {\n    __extends(ValueSetProperty, _super);\n    function ValueSetProperty(targetVersion, name, values, defaultValue, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.values = values;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        return _this;\n    }\n    ValueSetProperty.prototype.isValidValue = function (value, context) {\n        for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n            var versionedValue = _a[_i];\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\n                var targetVersion = versionedValue.targetVersion\n                    ? versionedValue.targetVersion\n                    : this.targetVersion;\n                return targetVersion.compareTo(context.targetVersion) <= 0;\n            }\n        }\n        return false;\n    };\n    ValueSetProperty.prototype.parse = function (sender, source, context) {\n        var sourceValue = source[this.name];\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n        if (typeof sourceValue === \"string\") {\n            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n                var versionedValue = _a[_i];\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n                    var targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return versionedValue.value;\n                    }\n                    else {\n                        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));\n        return this.defaultValue;\n    };\n    ValueSetProperty.prototype.toJSON = function (sender, target, value, context) {\n        var invalidValue = false;\n        if (value !== undefined) {\n            invalidValue = true;\n            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n                var versionedValue = _a[_i];\n                if (versionedValue.value === value) {\n                    var targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n                        break;\n                    }\n                    else {\n                        context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(value, this.name, targetVersion.toString(), context.targetVersion.toString()));\n                    }\n                }\n            }\n        }\n        if (!invalidValue) {\n            context.serializeValue(target, this.name, value, this.defaultValue, true);\n        }\n    };\n    return ValueSetProperty;\n}(PropertyDefinition));\nexports.ValueSetProperty = ValueSetProperty;\nvar EnumProperty = /** @class */ (function (_super) {\n    __extends(EnumProperty, _super);\n    function EnumProperty(targetVersion, name, enumType, defaultValue, values, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.enumType = enumType;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        _this._values = [];\n        if (!values) {\n            // eslint-disable-next-line guard-for-in\n            for (var key in enumType) {\n                var keyAsNumber = parseInt(key, 10);\n                if (keyAsNumber >= 0) {\n                    _this._values.push({ value: keyAsNumber });\n                }\n            }\n        }\n        else {\n            _this._values = values;\n        }\n        return _this;\n    }\n    EnumProperty.prototype.parse = function (sender, source, context) {\n        var sourceValue = source[this.name];\n        if (typeof sourceValue !== \"string\") {\n            return this.defaultValue;\n        }\n        var enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n        if (enumValue !== undefined) {\n            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n                var versionedValue = _a[_i];\n                if (versionedValue.value === enumValue) {\n                    var targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return enumValue;\n                    }\n                    else {\n                        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.propertyValueNotSupported(sourceValue, this.name, targetVersion.toString(), context.targetVersion.toString()));\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n        context.logParseEvent(sender, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(sourceValue, this.name));\n        return this.defaultValue;\n    };\n    EnumProperty.prototype.toJSON = function (sender, target, value, context) {\n        var invalidValue = false;\n        if (value !== undefined) {\n            invalidValue = true;\n            for (var _i = 0, _a = this.values; _i < _a.length; _i++) {\n                var versionedValue = _a[_i];\n                if (versionedValue.value === value) {\n                    var targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n                        break;\n                    }\n                    else {\n                        context.logEvent(sender, Enums.ValidationPhase.ToJSON, Enums.ValidationEvent.InvalidPropertyValue, strings_1.Strings.errors.invalidPropertyValue(value, this.name));\n                    }\n                }\n            }\n        }\n        if (!invalidValue) {\n            context.serializeEnum(this.enumType, target, this.name, value, this.defaultValue);\n        }\n    };\n    Object.defineProperty(EnumProperty.prototype, \"values\", {\n        get: function () {\n            return this._values;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    return EnumProperty;\n}(PropertyDefinition));\nexports.EnumProperty = EnumProperty;\nvar SerializableObjectProperty = /** @class */ (function (_super) {\n    __extends(SerializableObjectProperty, _super);\n    function SerializableObjectProperty(targetVersion, name, objectType, nullable, defaultValue) {\n        if (nullable === void 0) { nullable = false; }\n        var _this = _super.call(this, targetVersion, name, defaultValue, function (sender) {\n            return _this.nullable ? undefined : new _this.objectType();\n        }) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.objectType = objectType;\n        _this.nullable = nullable;\n        return _this;\n    }\n    SerializableObjectProperty.prototype.parse = function (sender, source, context) {\n        var sourceValue = source[this.name];\n        if (sourceValue === undefined) {\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n        }\n        var result = new this.objectType();\n        result.parse(sourceValue, context);\n        return result;\n    };\n    SerializableObjectProperty.prototype.toJSON = function (sender, target, value, context) {\n        var serializedValue = undefined;\n        if (value !== undefined && !value.hasAllDefaultValues()) {\n            serializedValue = value.toJSON(context);\n        }\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n            serializedValue = undefined;\n        }\n        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\n    };\n    return SerializableObjectProperty;\n}(PropertyDefinition));\nexports.SerializableObjectProperty = SerializableObjectProperty;\nvar SerializableObjectCollectionProperty = /** @class */ (function (_super) {\n    __extends(SerializableObjectCollectionProperty, _super);\n    function SerializableObjectCollectionProperty(targetVersion, name, objectType, onItemAdded) {\n        var _this = _super.call(this, targetVersion, name, undefined, function (sender) {\n            return [];\n        }) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.objectType = objectType;\n        _this.onItemAdded = onItemAdded;\n        return _this;\n    }\n    SerializableObjectCollectionProperty.prototype.parse = function (sender, source, context) {\n        var result = [];\n        var sourceCollection = source[this.name];\n        if (Array.isArray(sourceCollection)) {\n            for (var _i = 0, sourceCollection_1 = sourceCollection; _i < sourceCollection_1.length; _i++) {\n                var sourceItem = sourceCollection_1[_i];\n                var item = new this.objectType();\n                item.parse(sourceItem, context);\n                result.push(item);\n                if (this.onItemAdded) {\n                    this.onItemAdded(sender, item);\n                }\n            }\n        }\n        return result.length > 0\n            ? result\n            : this.onGetInitialValue\n                ? this.onGetInitialValue(sender)\n                : undefined;\n    };\n    SerializableObjectCollectionProperty.prototype.toJSON = function (sender, target, value, context) {\n        context.serializeArray(target, this.name, value);\n    };\n    return SerializableObjectCollectionProperty;\n}(PropertyDefinition));\nexports.SerializableObjectCollectionProperty = SerializableObjectCollectionProperty;\nvar CustomProperty = /** @class */ (function (_super) {\n    __extends(CustomProperty, _super);\n    function CustomProperty(targetVersion, name, onParse, onToJSON, defaultValue, onGetInitialValue) {\n        var _this = _super.call(this, targetVersion, name, defaultValue, onGetInitialValue) || this;\n        _this.targetVersion = targetVersion;\n        _this.name = name;\n        _this.onParse = onParse;\n        _this.onToJSON = onToJSON;\n        _this.defaultValue = defaultValue;\n        _this.onGetInitialValue = onGetInitialValue;\n        if (!_this.onParse) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n        }\n        if (!_this.onToJSON) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n        }\n        return _this;\n    }\n    CustomProperty.prototype.parse = function (sender, source, context) {\n        return this.onParse(sender, this, source, context);\n    };\n    CustomProperty.prototype.toJSON = function (sender, target, value, context) {\n        this.onToJSON(sender, this, target, value, context);\n    };\n    return CustomProperty;\n}(PropertyDefinition));\nexports.CustomProperty = CustomProperty;\nvar SerializableObjectSchema = /** @class */ (function () {\n    function SerializableObjectSchema() {\n        this._properties = [];\n    }\n    SerializableObjectSchema.prototype.indexOf = function (prop) {\n        for (var i = 0; i < this._properties.length; i++) {\n            if (this._properties[i] === prop) {\n                return i;\n            }\n        }\n        return -1;\n    };\n    SerializableObjectSchema.prototype.add = function () {\n        var properties = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            properties[_i] = arguments[_i];\n        }\n        for (var _a = 0, properties_1 = properties; _a < properties_1.length; _a++) {\n            var prop = properties_1[_a];\n            if (this.indexOf(prop) === -1) {\n                this._properties.push(prop);\n            }\n        }\n    };\n    SerializableObjectSchema.prototype.remove = function () {\n        var properties = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            properties[_i] = arguments[_i];\n        }\n        for (var _a = 0, properties_2 = properties; _a < properties_2.length; _a++) {\n            var prop = properties_2[_a];\n            while (true) {\n                var index = this.indexOf(prop);\n                if (index >= 0) {\n                    this._properties.splice(index, 1);\n                }\n                else {\n                    break;\n                }\n            }\n        }\n    };\n    SerializableObjectSchema.prototype.getItemAt = function (index) {\n        return this._properties[index];\n    };\n    SerializableObjectSchema.prototype.getCount = function () {\n        return this._properties.length;\n    };\n    return SerializableObjectSchema;\n}());\nexports.SerializableObjectSchema = SerializableObjectSchema;\n// This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\nfunction property(prop) {\n    return function (target, propertyKey) {\n        var descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.get = function () {\n                return this.getValue(prop);\n            };\n            descriptor.set = function (value) {\n                this.setValue(prop, value);\n            };\n            Object.defineProperty(target, propertyKey, descriptor);\n        }\n    };\n}\nexports.property = property;\nvar SerializableObject = /** @class */ (function () {\n    function SerializableObject() {\n        this._propertyBag = {};\n        this._rawProperties = {};\n        this.maxVersion = SerializableObject.defaultMaxVersion;\n        var s = this.getSchema();\n        for (var i = 0; i < s.getCount(); i++) {\n            var prop = s.getItemAt(i);\n            if (prop.onGetInitialValue) {\n                this.setValue(prop, prop.onGetInitialValue(this));\n            }\n        }\n    }\n    SerializableObject.prototype.getDefaultSerializationContext = function () {\n        return new SimpleSerializationContext();\n    };\n    SerializableObject.prototype.populateSchema = function (schema) {\n        var ctor = this.constructor;\n        var properties = [];\n        // eslint-disable-next-line guard-for-in\n        for (var propertyName in ctor) {\n            try {\n                var propertyValue = ctor[propertyName];\n                if (propertyValue instanceof PropertyDefinition) {\n                    properties.push(propertyValue);\n                }\n            }\n            catch (_a) {\n                // If a property happens to have a getter function and\n                // it throws an exception, we need to catch it here\n            }\n        }\n        if (properties.length > 0) {\n            var sortedProperties = properties.sort(function (p1, p2) {\n                if (p1.sequentialNumber > p2.sequentialNumber) {\n                    return 1;\n                }\n                else if (p1.sequentialNumber < p2.sequentialNumber) {\n                    return -1;\n                }\n                return 0;\n            });\n            schema.add.apply(schema, sortedProperties);\n        }\n        if (SerializableObject.onRegisterCustomProperties) {\n            SerializableObject.onRegisterCustomProperties(this, schema);\n        }\n    };\n    SerializableObject.prototype.getValue = function (prop) {\n        return this._propertyBag.hasOwnProperty(prop.getInternalName())\n            ? this._propertyBag[prop.getInternalName()]\n            : prop.defaultValue;\n    };\n    SerializableObject.prototype.setValue = function (prop, value) {\n        if (value === undefined || value === null) {\n            delete this._propertyBag[prop.getInternalName()];\n        }\n        else {\n            this._propertyBag[prop.getInternalName()] = value;\n        }\n    };\n    SerializableObject.prototype.internalParse = function (source, context) {\n        this._propertyBag = {};\n        this._rawProperties = shared_1.GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\n        if (source) {\n            var s = this.getSchema();\n            for (var i = 0; i < s.getCount(); i++) {\n                var prop = s.getItemAt(i);\n                if (prop.isSerializationEnabled) {\n                    var propertyValue = prop.onGetInitialValue\n                        ? prop.onGetInitialValue(this)\n                        : undefined;\n                    if (source.hasOwnProperty(prop.name)) {\n                        if (prop.targetVersion.compareTo(context.targetVersion) <= 0) {\n                            propertyValue = prop.parse(this, source, context);\n                        }\n                        else {\n                            context.logParseEvent(this, Enums.ValidationEvent.UnsupportedProperty, strings_1.Strings.errors.propertyNotSupported(prop.name, prop.targetVersion.toString(), context.targetVersion.toString()));\n                        }\n                    }\n                    this.setValue(prop, propertyValue);\n                }\n            }\n        }\n        else {\n            this.resetDefaultValues();\n        }\n    };\n    SerializableObject.prototype.internalToJSON = function (target, context) {\n        var s = this.getSchema();\n        var serializedProperties = [];\n        for (var i = 0; i < s.getCount(); i++) {\n            var prop = s.getItemAt(i);\n            // Avoid serializing the same property multiple times. This is necessary\n            // because some property definitions map to the same underlying schema\n            // property\n            if (prop.isSerializationEnabled &&\n                prop.targetVersion.compareTo(context.targetVersion) <= 0 &&\n                serializedProperties.indexOf(prop.name) === -1) {\n                prop.toJSON(this, target, this.getValue(prop), context);\n                serializedProperties.push(prop.name);\n            }\n        }\n    };\n    SerializableObject.prototype.shouldSerialize = function (_context) {\n        return true;\n    };\n    SerializableObject.prototype.parse = function (source, context) {\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\n    };\n    SerializableObject.prototype.toJSON = function (context) {\n        var effectiveContext;\n        if (context && context instanceof BaseSerializationContext) {\n            effectiveContext = context;\n        }\n        else {\n            effectiveContext = this.getDefaultSerializationContext();\n            effectiveContext.toJSONOriginalParam = context;\n        }\n        if (this.shouldSerialize(effectiveContext)) {\n            var result = void 0;\n            if (shared_1.GlobalSettings.enableFullJsonRoundTrip &&\n                this._rawProperties &&\n                typeof this._rawProperties === \"object\") {\n                result = this._rawProperties;\n            }\n            else {\n                result = {};\n            }\n            this.internalToJSON(result, effectiveContext);\n            return result;\n        }\n        else {\n            return undefined;\n        }\n    };\n    SerializableObject.prototype.hasDefaultValue = function (prop) {\n        return this.getValue(prop) === prop.defaultValue;\n    };\n    SerializableObject.prototype.hasAllDefaultValues = function () {\n        var s = this.getSchema();\n        for (var i = 0; i < s.getCount(); i++) {\n            var prop = s.getItemAt(i);\n            if (!this.hasDefaultValue(prop)) {\n                return false;\n            }\n        }\n        return true;\n    };\n    SerializableObject.prototype.resetDefaultValues = function () {\n        var s = this.getSchema();\n        for (var i = 0; i < s.getCount(); i++) {\n            var prop = s.getItemAt(i);\n            this.setValue(prop, prop.defaultValue);\n        }\n    };\n    SerializableObject.prototype.setCustomProperty = function (name, value) {\n        var shouldDeleteProperty = (typeof value === \"string\" && !value) || value === undefined || value === null;\n        if (shouldDeleteProperty) {\n            delete this._rawProperties[name];\n        }\n        else {\n            this._rawProperties[name] = value;\n        }\n    };\n    SerializableObject.prototype.getCustomProperty = function (name) {\n        return this._rawProperties[name];\n    };\n    SerializableObject.prototype.getSchema = function () {\n        var schema = SerializableObject._schemaCache[this.getSchemaKey()];\n        if (!schema) {\n            schema = new SerializableObjectSchema();\n            this.populateSchema(schema);\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n        }\n        return schema;\n    };\n    SerializableObject.defaultMaxVersion = Versions.latest;\n    SerializableObject._schemaCache = {};\n    return SerializableObject;\n}());\nexports.SerializableObject = SerializableObject;\n"},"sourceMaps":{"js":{"version":3,"file":"serialization.js","sourceRoot":"","sources":["../src/serialization.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport { GlobalSettings, SizeAndUnit } from \"./shared\";\nimport * as Utils from \"./utils\";\nimport * as Enums from \"./enums\";\nimport { Strings } from \"./strings\";\n\nexport interface IValidationEvent {\n    source?: SerializableObject;\n    phase: Enums.ValidationPhase;\n    event: Enums.ValidationEvent;\n    message: string;\n}\n\nexport class Version {\n    private _versionString: string;\n    private _major: number;\n    private _minor: number;\n    private _isValid: boolean = true;\n    private _label?: string;\n\n    constructor(major: number = 1, minor: number = 1, label?: string) {\n        this._major = major;\n        this._minor = minor;\n        this._label = label;\n    }\n\n    static parse(versionString: string, context: BaseSerializationContext): Version | undefined {\n        if (!versionString) {\n            return undefined;\n        }\n\n        const result = new Version();\n        result._versionString = versionString;\n\n        const regEx = /(\\d+).(\\d+)/gi;\n        const matches = regEx.exec(versionString);\n\n        if (matches != null && matches.length === 3) {\n            result._major = parseInt(matches[1]);\n            result._minor = parseInt(matches[2]);\n        } else {\n            result._isValid = false;\n        }\n\n        if (!result._isValid) {\n            context.logParseEvent(\n                undefined,\n                Enums.ValidationEvent.InvalidPropertyValue,\n                Strings.errors.invalidVersionString(result._versionString)\n            );\n        }\n\n        return result;\n    }\n\n    toString(): string {\n        return !this._isValid ? this._versionString : this._major + \".\" + this._minor;\n    }\n\n    toJSON(): any {\n        return this.toString();\n    }\n\n    compareTo(otherVersion: Version): number {\n        if (!this.isValid || !otherVersion.isValid) {\n            throw new Error(\"Cannot compare invalid version.\");\n        }\n\n        if (this.major > otherVersion.major) {\n            return 1;\n        } else if (this.major < otherVersion.major) {\n            return -1;\n        } else if (this.minor > otherVersion.minor) {\n            return 1;\n        } else if (this.minor < otherVersion.minor) {\n            return -1;\n        }\n\n        return 0;\n    }\n\n    get label(): string {\n        return this._label ? this._label : this.toString();\n    }\n\n    get major(): number {\n        return this._major;\n    }\n\n    get minor(): number {\n        return this._minor;\n    }\n\n    get isValid(): boolean {\n        return this._isValid;\n    }\n}\n\nexport type TargetVersion = Version | \"*\";\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class Versions {\n    /* eslint-disable @typescript-eslint/naming-convention */\n    static readonly v1_0 = new Version(1, 0);\n    static readonly v1_1 = new Version(1, 1);\n    static readonly v1_2 = new Version(1, 2);\n    static readonly v1_3 = new Version(1, 3);\n    static readonly v1_4 = new Version(1, 4);\n    static readonly v1_5 = new Version(1, 5);\n    static readonly v1_6 = new Version(1, 6);\n    static readonly latest = Versions.v1_6;\n    // If preview tag is added/removed from any version,\n    // don't forget to update .ac-schema-version-1-?::after too in adaptivecards-site\\themes\\adaptivecards\\source\\css\\style.css\n    /* eslint-enable @typescript-eslint/naming-convention */\n\n    static getAllDeclaredVersions(): Version[] {\n        const ctor = <any>Versions;\n        const properties: Version[] = [];\n\n        for (const propertyName in ctor) {\n            if (propertyName.match(/^v[0-9_]*$/)) {\n                // filter latest\n                try {\n                    const propertyValue = ctor[propertyName];\n\n                    if (propertyValue instanceof Version) {\n                        properties.push(propertyValue);\n                    }\n                } catch {\n                    // If a property happens to have a getter function and\n                    // it throws an exception, we need to catch it here\n                }\n            }\n        }\n        return properties.sort((v1: Version, v2: Version) => v1.compareTo(v2));\n    }\n}\n\nexport function isVersionLessOrEqual(\n    version: TargetVersion,\n    targetVersion: TargetVersion\n): boolean {\n    if (version instanceof Version) {\n        if (targetVersion instanceof Version) {\n            return targetVersion.compareTo(version) >= 0;\n        } else {\n            // Target version is *\n            return true;\n        }\n    } else {\n        // Version is *\n        return true;\n    }\n}\n\nexport abstract class BaseSerializationContext {\n    private _validationEvents: IValidationEvent[] = [];\n\n    toJSONOriginalParam: any;\n    targetVersion: Version;\n\n    constructor(targetVersion: Version = Versions.latest) {\n        this.targetVersion = targetVersion;\n    }\n    \n    private isTemplateString(value: any) {\n        if (typeof value === \"string\") {\n            return value.startsWith(\"${\");\n        } else {\n            return false;\n        }\n    }\n\n    private tryDeleteValue(target: { [key: string]: any }, propertyName: string) {\n        if (!GlobalSettings.enableFullJsonRoundTrip) {\n            delete target[propertyName];\n        }\n    }\n\n    private tryDeleteDefaultValue(target: { [key: string]: any }, propertyName: string) {\n        if (!GlobalSettings.enableFullJsonRoundTrip || !this.isTemplateString(target[propertyName])) {\n            delete target[propertyName];\n        }\n    }\n\n    serializeValue(\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: any,\n        defaultValue: any = undefined,\n        forceDeleteIfNullOrDefault: boolean = false\n    ) {\n        if (\n            propertyValue === null ||\n            propertyValue === undefined\n        ) {\n            if (!GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault) {\n                delete target[propertyName];\n            }\n        } else if (propertyValue === defaultValue) {\n            if (!GlobalSettings.enableFullJsonRoundTrip || forceDeleteIfNullOrDefault || !this.isTemplateString(target[propertyName])) {\n                delete target[propertyName];\n            }\n        } else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeString(\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue?: string,\n        defaultValue?: string\n    ) {\n        if (\n            propertyValue === null ||\n            propertyValue === undefined\n        ) {\n            this.tryDeleteValue(target, propertyName);\n        } else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        } else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeBool(\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue?: boolean,\n        defaultValue?: boolean\n    ) {\n        if (\n            propertyValue === null ||\n            propertyValue === undefined\n        ) {\n            this.tryDeleteValue(target, propertyName);\n        } else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        } else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeNumber(\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue?: number,\n        defaultValue?: number\n    ) {\n        if (\n            propertyValue === null ||\n            propertyValue === undefined ||\n            isNaN(propertyValue)\n        ) {\n            this.tryDeleteValue(target, propertyName);\n        } else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        } else {\n            target[propertyName] = propertyValue;\n        }\n    }\n\n    serializeEnum(\n        enumType: { [s: number]: string },\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: number | undefined,\n        defaultValue: number | undefined = undefined\n    ) {\n        if (\n            propertyValue === null ||\n            propertyValue === undefined\n        ) {\n            this.tryDeleteValue(target, propertyName);\n        } else if (propertyValue === defaultValue) {\n            this.tryDeleteDefaultValue(target, propertyName);\n        } else {\n            target[propertyName] = enumType[propertyValue];\n        }\n    }\n\n    serializeArray(\n        target: { [key: string]: any },\n        propertyName: string,\n        propertyValue: any[] | undefined\n    ) {\n        const items = [];\n\n        if (propertyValue) {\n            for (const item of propertyValue) {\n                let serializedItem: any = undefined;\n\n                if (item instanceof SerializableObject) {\n                    serializedItem = item.toJSON(this);\n                } else if (item.toJSON) {\n                    serializedItem = item.toJSON();\n                } else {\n                    serializedItem = item;\n                }\n\n                if (serializedItem !== undefined) {\n                    items.push(serializedItem);\n                }\n            }\n        }\n\n        if (items.length === 0) {\n            if (target.hasOwnProperty(propertyName) && Array.isArray(target[propertyName])) {\n                delete target[propertyName];\n            }\n        } else {\n            this.serializeValue(target, propertyName, items);\n        }\n    }\n\n    clearEvents() {\n        this._validationEvents = [];\n    }\n\n    logEvent(\n        source: SerializableObject | undefined,\n        phase: Enums.ValidationPhase,\n        event: Enums.ValidationEvent,\n        message: string\n    ) {\n        this._validationEvents.push({\n            source: source,\n            phase: phase,\n            event: event,\n            message: message\n        });\n    }\n\n    logParseEvent(\n        source: SerializableObject | undefined,\n        event: Enums.ValidationEvent,\n        message: string\n    ) {\n        this.logEvent(source, Enums.ValidationPhase.Parse, event, message);\n    }\n\n    getEventAt(index: number): IValidationEvent {\n        return this._validationEvents[index];\n    }\n\n    get eventCount(): number {\n        return this._validationEvents.length;\n    }\n}\n\nclass SimpleSerializationContext extends BaseSerializationContext {}\n\nexport class PropertyDefinition {\n    private static _sequentialNumber: number = 0;\n\n    getInternalName(): string {\n        return this.name;\n    }\n\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): any {\n        return source[this.name];\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: any,\n        context: BaseSerializationContext\n    ): void {\n        context.serializeValue(target, this.name, value, this.defaultValue);\n    }\n\n    readonly sequentialNumber: number;\n\n    isSerializationEnabled: boolean = true;\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: any,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\n    ) {\n        this.sequentialNumber = PropertyDefinition._sequentialNumber;\n\n        PropertyDefinition._sequentialNumber++;\n    }\n}\n\nexport class StringProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): string | undefined {\n        const parsedValue = Utils.parseString(source[this.name], this.defaultValue);\n        const isUndefined =\n            parsedValue === undefined || (parsedValue === \"\" && this.treatEmptyAsUndefined);\n\n        if (!isUndefined && this.regEx !== undefined) {\n            const matches = this.regEx.exec(parsedValue);\n\n            if (!matches) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(parsedValue, this.name)\n                );\n\n                return undefined;\n            }\n        }\n\n        return parsedValue;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: string | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeString(\n            target,\n            this.name,\n            value === \"\" && this.treatEmptyAsUndefined ? undefined : value,\n            this.defaultValue\n        );\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly treatEmptyAsUndefined: boolean = true,\n        readonly regEx?: RegExp,\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class BoolProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): boolean | undefined {\n        return Utils.parseBool(source[this.name], this.defaultValue);\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: object,\n        value: boolean | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeBool(target, this.name, value, this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: boolean,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class NumProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): number | undefined {\n        return Utils.parseNumber(source[this.name], this.defaultValue);\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: number | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeNumber(target, this.name, value, this.defaultValue);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: number,\n        readonly onGetInitialValue?: (sender: SerializableObject) => any\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class PixelSizeProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): number | undefined {\n        let result: number | undefined = undefined;\n        const value = source[this.name];\n\n        if (typeof value === \"string\") {\n            let isValid = false;\n\n            try {\n                const size = SizeAndUnit.parse(value, true);\n\n                if (size.unit === Enums.SizeUnit.Pixel) {\n                    result = size.physicalSize;\n\n                    isValid = true;\n                }\n            } catch {\n                // Do nothing. A parse error is emitted below\n            }\n\n            if (!isValid) {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    Strings.errors.invalidPropertyValue(source[this.name], this.name)\n                );\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: number | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeValue(\n            target,\n            this.name,\n            typeof value === \"number\" && !isNaN(value) ? value + \"px\" : undefined\n        );\n    }\n}\n\nexport interface IVersionedValue<TValue> {\n    value: TValue;\n    targetVersion?: Version;\n}\n\nexport class StringArrayProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): string[] | undefined {\n        const sourceValue = source[this.name];\n\n        if (sourceValue === undefined || !Array.isArray(sourceValue)) {\n            return this.defaultValue;\n        }\n\n        const result: string[] = [];\n\n        for (const value of sourceValue) {\n            if (typeof value === \"string\") {\n                result.push(value);\n            } else {\n                context.logParseEvent(\n                    sender,\n                    Enums.ValidationEvent.InvalidPropertyValue,\n                    `Invalid array value \"${JSON.stringify(\n                        value\n                    )}\" of type \"${typeof value}\" ignored for \"${this.name}\".`\n                );\n            }\n        }\n\n        return result;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: string[] | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly defaultValue?: string[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => string[] | undefined\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class ValueSetProperty extends PropertyDefinition {\n    isValidValue(value: string, context: BaseSerializationContext): boolean {\n        for (const versionedValue of this.values) {\n            if (value.toLowerCase() === versionedValue.value.toLowerCase()) {\n                const targetVersion = versionedValue.targetVersion\n                    ? versionedValue.targetVersion\n                    : this.targetVersion;\n\n                return targetVersion.compareTo(context.targetVersion) <= 0;\n            }\n        }\n\n        return false;\n    }\n\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): string | undefined {\n        const sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.defaultValue;\n        }\n\n        if (typeof sourceValue === \"string\") {\n            for (const versionedValue of this.values) {\n                if (sourceValue.toLowerCase() === versionedValue.value.toLowerCase()) {\n                    const targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return versionedValue.value;\n                    } else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()\n                            )\n                        );\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name)\n        );\n\n        return this.defaultValue;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: string | undefined,\n        context: BaseSerializationContext\n    ) {\n        let invalidValue = false;\n\n        if (value !== undefined) {\n            invalidValue = true;\n\n            for (const versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    const targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n\n                        break;\n                    } else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                value,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()\n                            )\n                        );\n                    }\n                }\n            }\n        }\n\n        if (!invalidValue) {\n            context.serializeValue(target, this.name, value, this.defaultValue, true);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly values: IVersionedValue<string>[],\n        readonly defaultValue?: string,\n        readonly onGetInitialValue?: (sender: SerializableObject) => string\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n    }\n}\n\nexport class EnumProperty<TEnum extends { [s: number]: string }> extends PropertyDefinition {\n    private _values: IVersionedValue<number>[] = [];\n\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): number | undefined {\n        const sourceValue = source[this.name];\n\n        if (typeof sourceValue !== \"string\") {\n            return this.defaultValue;\n        }\n\n        const enumValue = Utils.getEnumValueByName(this.enumType, sourceValue);\n\n        if (enumValue !== undefined) {\n            for (const versionedValue of this.values) {\n                if (versionedValue.value === enumValue) {\n                    const targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        return enumValue;\n                    } else {\n                        context.logParseEvent(\n                            sender,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.propertyValueNotSupported(\n                                sourceValue,\n                                this.name,\n                                targetVersion.toString(),\n                                context.targetVersion.toString()\n                            )\n                        );\n\n                        return this.defaultValue;\n                    }\n                }\n            }\n        }\n\n        context.logParseEvent(\n            sender,\n            Enums.ValidationEvent.InvalidPropertyValue,\n            Strings.errors.invalidPropertyValue(sourceValue, this.name)\n        );\n\n        return this.defaultValue;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: number | undefined,\n        context: BaseSerializationContext\n    ) {\n        let invalidValue = false;\n\n        if (value !== undefined) {\n            invalidValue = true;\n\n            for (const versionedValue of this.values) {\n                if (versionedValue.value === value) {\n                    const targetVersion = versionedValue.targetVersion\n                        ? versionedValue.targetVersion\n                        : this.targetVersion;\n\n                    if (targetVersion.compareTo(context.targetVersion) <= 0) {\n                        invalidValue = false;\n\n                        break;\n                    } else {\n                        context.logEvent(\n                            sender,\n                            Enums.ValidationPhase.ToJSON,\n                            Enums.ValidationEvent.InvalidPropertyValue,\n                            Strings.errors.invalidPropertyValue(value, this.name)\n                        );\n                    }\n                }\n            }\n        }\n\n        if (!invalidValue) {\n            context.serializeEnum(this.enumType, target, this.name, value, this.defaultValue);\n        }\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly enumType: TEnum,\n        readonly defaultValue?: number,\n        values?: IVersionedValue<number>[],\n        readonly onGetInitialValue?: (sender: SerializableObject) => number\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!values) {\n            // eslint-disable-next-line guard-for-in\n            for (const key in enumType) {\n                const keyAsNumber = parseInt(key, 10);\n\n                if (keyAsNumber >= 0) {\n                    this._values.push({ value: keyAsNumber });\n                }\n            }\n        } else {\n            this._values = values;\n        }\n    }\n\n    get values(): IVersionedValue<number>[] {\n        return this._values;\n    }\n}\n\nexport type SerializableObjectType = { new (): SerializableObject };\n\nexport class SerializableObjectProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): SerializableObject | undefined {\n        const sourceValue = source[this.name];\n\n        if (sourceValue === undefined) {\n            return this.onGetInitialValue ? this.onGetInitialValue(sender) : this.defaultValue;\n        }\n\n        const result = new this.objectType();\n        result.parse(sourceValue, context);\n\n        return result;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: SerializableObject | undefined,\n        context: BaseSerializationContext\n    ) {\n        let serializedValue: object | undefined = undefined;\n\n        if (value !== undefined && !value.hasAllDefaultValues()) {\n            serializedValue = value.toJSON(context);\n        }\n\n        if (typeof serializedValue === \"object\" && Object.keys(serializedValue).length === 0) {\n            serializedValue = undefined;\n        }\n\n        context.serializeValue(target, this.name, serializedValue, this.defaultValue, true);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly nullable: boolean = false,\n        defaultValue?: SerializableObject\n    ) {\n        super(targetVersion, name, defaultValue, (sender: SerializableObject) => {\n            return this.nullable ? undefined : new this.objectType();\n        });\n    }\n}\n\nexport class SerializableObjectCollectionProperty extends PropertyDefinition {\n    parse(\n        sender: SerializableObject,\n        source: PropertyBag,\n        context: BaseSerializationContext\n    ): SerializableObject[] | undefined {\n        const result: SerializableObject[] | undefined = [];\n\n        const sourceCollection = source[this.name];\n\n        if (Array.isArray(sourceCollection)) {\n            for (const sourceItem of sourceCollection) {\n                const item = new this.objectType();\n                item.parse(sourceItem, context);\n\n                result.push(item);\n\n                if (this.onItemAdded) {\n                    this.onItemAdded(sender, item);\n                }\n            }\n        }\n\n        return result.length > 0\n            ? result\n            : this.onGetInitialValue\n            ? this.onGetInitialValue(sender)\n            : undefined;\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: SerializableObject[] | undefined,\n        context: BaseSerializationContext\n    ) {\n        context.serializeArray(target, this.name, value);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly objectType: SerializableObjectType,\n        readonly onItemAdded?: (sender: SerializableObject, item: SerializableObject) => void\n    ) {\n        super(targetVersion, name, undefined, (sender: SerializableObject) => {\n            return [];\n        });\n    }\n}\n\nexport class CustomProperty<T> extends PropertyDefinition {\n    parse(sender: SerializableObject, source: PropertyBag, context: BaseSerializationContext): T {\n        return this.onParse(sender, this, source, context);\n    }\n\n    toJSON(\n        sender: SerializableObject,\n        target: PropertyBag,\n        value: T,\n        context: BaseSerializationContext\n    ) {\n        this.onToJSON(sender, this, target, value, context);\n    }\n\n    constructor(\n        readonly targetVersion: Version,\n        readonly name: string,\n        readonly onParse: (\n            sender: SerializableObject,\n            property: PropertyDefinition,\n            source: PropertyBag,\n            context: BaseSerializationContext\n        ) => T,\n        readonly onToJSON: (\n            sender: SerializableObject,\n            property: PropertyDefinition,\n            target: PropertyBag,\n            value: T,\n            context: BaseSerializationContext\n        ) => void,\n        readonly defaultValue?: T,\n        readonly onGetInitialValue?: (sender: SerializableObject) => T\n    ) {\n        super(targetVersion, name, defaultValue, onGetInitialValue);\n\n        if (!this.onParse) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onParse handler.\");\n        }\n\n        if (!this.onToJSON) {\n            throw new Error(\"CustomPropertyDefinition instances must have an onToJSON handler.\");\n        }\n    }\n}\n\nexport class SerializableObjectSchema {\n    private _properties: PropertyDefinition[] = [];\n\n    indexOf(prop: PropertyDefinition): number {\n        for (let i = 0; i < this._properties.length; i++) {\n            if (this._properties[i] === prop) {\n                return i;\n            }\n        }\n\n        return -1;\n    }\n\n    add(...properties: PropertyDefinition[]) {\n        for (const prop of properties) {\n            if (this.indexOf(prop) === -1) {\n                this._properties.push(prop);\n            }\n        }\n    }\n\n    remove(...properties: PropertyDefinition[]) {\n        for (const prop of properties) {\n            while (true) {\n                const index = this.indexOf(prop);\n\n                if (index >= 0) {\n                    this._properties.splice(index, 1);\n                } else {\n                    break;\n                }\n            }\n        }\n    }\n\n    getItemAt(index: number): PropertyDefinition {\n        return this._properties[index];\n    }\n\n    getCount(): number {\n        return this._properties.length;\n    }\n}\n\n// This is a decorator function, used to map SerializableObject descendant class members to\n// schema properties\nexport function property(prop: PropertyDefinition) {\n    return function (target: any, propertyKey: string) {\n        const descriptor = Object.getOwnPropertyDescriptor(target, propertyKey) || {};\n\n        if (!descriptor.get && !descriptor.set) {\n            descriptor.get = function (this: SerializableObject) {\n                return this.getValue(prop);\n            };\n            descriptor.set = function (this: SerializableObject, value: any) {\n                this.setValue(prop, value);\n            };\n\n            Object.defineProperty(target, propertyKey, descriptor);\n        }\n    };\n}\n\nexport type PropertyBag = { [propertyName: string]: any };\n\nexport abstract class SerializableObject {\n    static onRegisterCustomProperties?: (\n        sender: SerializableObject,\n        schema: SerializableObjectSchema\n    ) => void;\n    static defaultMaxVersion: Version = Versions.latest;\n\n    private static readonly _schemaCache: { [typeName: string]: SerializableObjectSchema } = {};\n\n    private _propertyBag: PropertyBag = {};\n    private _rawProperties: PropertyBag = {};\n\n    protected abstract getSchemaKey(): string;\n\n    protected getDefaultSerializationContext(): BaseSerializationContext {\n        return new SimpleSerializationContext();\n    }\n\n    protected populateSchema(schema: SerializableObjectSchema) {\n        const ctor = <any>this.constructor;\n        const properties: PropertyDefinition[] = [];\n\n        // eslint-disable-next-line guard-for-in\n        for (const propertyName in ctor) {\n            try {\n                const propertyValue = ctor[propertyName];\n\n                if (propertyValue instanceof PropertyDefinition) {\n                    properties.push(propertyValue);\n                }\n            } catch {\n                // If a property happens to have a getter function and\n                // it throws an exception, we need to catch it here\n            }\n        }\n\n        if (properties.length > 0) {\n            const sortedProperties = properties.sort(\n                (p1: PropertyDefinition, p2: PropertyDefinition) => {\n                    if (p1.sequentialNumber > p2.sequentialNumber) {\n                        return 1;\n                    } else if (p1.sequentialNumber < p2.sequentialNumber) {\n                        return -1;\n                    }\n\n                    return 0;\n                }\n            );\n\n            schema.add(...sortedProperties);\n        }\n\n        if (SerializableObject.onRegisterCustomProperties) {\n            SerializableObject.onRegisterCustomProperties(this, schema);\n        }\n    }\n\n    protected getValue(prop: PropertyDefinition): any {\n        return this._propertyBag.hasOwnProperty(prop.getInternalName())\n            ? this._propertyBag[prop.getInternalName()]\n            : prop.defaultValue;\n    }\n\n    protected setValue(prop: PropertyDefinition, value: any) {\n        if (value === undefined || value === null) {\n            delete this._propertyBag[prop.getInternalName()];\n        } else {\n            this._propertyBag[prop.getInternalName()] = value;\n        }\n    }\n\n    protected internalParse(source: PropertyBag, context: BaseSerializationContext) {\n        this._propertyBag = {};\n        this._rawProperties = GlobalSettings.enableFullJsonRoundTrip ? (source ? source : {}) : {};\n\n        if (source) {\n            const s = this.getSchema();\n\n            for (let i = 0; i < s.getCount(); i++) {\n                const prop = s.getItemAt(i);\n\n                if (prop.isSerializationEnabled) {\n                    let propertyValue = prop.onGetInitialValue\n                        ? prop.onGetInitialValue(this)\n                        : undefined;\n\n                    if (source.hasOwnProperty(prop.name)) {\n                        if (prop.targetVersion.compareTo(context.targetVersion) <= 0) {\n                            propertyValue = prop.parse(this, source, context);\n                        } else {\n                            context.logParseEvent(\n                                this,\n                                Enums.ValidationEvent.UnsupportedProperty,\n                                Strings.errors.propertyNotSupported(\n                                    prop.name,\n                                    prop.targetVersion.toString(),\n                                    context.targetVersion.toString()\n                                )\n                            );\n                        }\n                    }\n\n                    this.setValue(prop, propertyValue);\n                }\n            }\n        } else {\n            this.resetDefaultValues();\n        }\n    }\n\n    protected internalToJSON(target: PropertyBag, context: BaseSerializationContext) {\n        const s = this.getSchema();\n        const serializedProperties: string[] = [];\n\n        for (let i = 0; i < s.getCount(); i++) {\n            const prop = s.getItemAt(i);\n\n            // Avoid serializing the same property multiple times. This is necessary\n            // because some property definitions map to the same underlying schema\n            // property\n            if (\n                prop.isSerializationEnabled &&\n                prop.targetVersion.compareTo(context.targetVersion) <= 0 &&\n                serializedProperties.indexOf(prop.name) === -1\n            ) {\n                prop.toJSON(this, target, this.getValue(prop), context);\n\n                serializedProperties.push(prop.name);\n            }\n        }\n    }\n\n    protected shouldSerialize(_context: BaseSerializationContext): boolean {\n        return true;\n    }\n\n    maxVersion: Version = SerializableObject.defaultMaxVersion;\n\n    constructor() {\n        const s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            const prop = s.getItemAt(i);\n\n            if (prop.onGetInitialValue) {\n                this.setValue(prop, prop.onGetInitialValue(this));\n            }\n        }\n    }\n\n    parse(source: PropertyBag, context?: BaseSerializationContext) {\n        this.internalParse(source, context ? context : new SimpleSerializationContext());\n    }\n\n    toJSON(context?: BaseSerializationContext): PropertyBag | undefined {\n        let effectiveContext: BaseSerializationContext;\n\n        if (context && context instanceof BaseSerializationContext) {\n            effectiveContext = context;\n        } else {\n            effectiveContext = this.getDefaultSerializationContext();\n            effectiveContext.toJSONOriginalParam = context;\n        }\n\n        if (this.shouldSerialize(effectiveContext)) {\n            let result: PropertyBag;\n\n            if (\n                GlobalSettings.enableFullJsonRoundTrip &&\n                this._rawProperties &&\n                typeof this._rawProperties === \"object\"\n            ) {\n                result = this._rawProperties;\n            } else {\n                result = {};\n            }\n\n            this.internalToJSON(result, effectiveContext);\n\n            return result;\n        } else {\n            return undefined;\n        }\n    }\n\n    hasDefaultValue(prop: PropertyDefinition): boolean {\n        return this.getValue(prop) === prop.defaultValue;\n    }\n\n    hasAllDefaultValues(): boolean {\n        const s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            const prop = s.getItemAt(i);\n\n            if (!this.hasDefaultValue(prop)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    resetDefaultValues() {\n        const s = this.getSchema();\n\n        for (let i = 0; i < s.getCount(); i++) {\n            const prop = s.getItemAt(i);\n\n            this.setValue(prop, prop.defaultValue);\n        }\n    }\n\n    setCustomProperty(name: string, value: any) {\n        const shouldDeleteProperty =\n            (typeof value === \"string\" && !value) || value === undefined || value === null;\n\n        if (shouldDeleteProperty) {\n            delete this._rawProperties[name];\n        } else {\n            this._rawProperties[name] = value;\n        }\n    }\n\n    getCustomProperty(name: string): any {\n        return this._rawProperties[name];\n    }\n\n    getSchema(): SerializableObjectSchema {\n        let schema: SerializableObjectSchema = SerializableObject._schemaCache[this.getSchemaKey()];\n\n        if (!schema) {\n            schema = new SerializableObjectSchema();\n\n            this.populateSchema(schema);\n\n            SerializableObject._schemaCache[this.getSchemaKey()] = schema;\n        }\n\n        return schema;\n    }\n}\n"]}},"error":null,"hash":"20b7dfbbd7aead11ebca7e65a7c7c6bf","cacheData":{"env":{}}}