{"id":"../../node_modules/adaptivecards/lib/adaptive-applet.js","dependencies":[{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js.map","includedInParent":true,"mtime":1689085533782},{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\src\\adaptive-applet.ts","includedInParent":true,"mtime":1689085533964},{"name":"C:\\Users\\t-acruau\\adaptive-cards\\package.json","includedInParent":true,"mtime":1689259513501},{"name":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\package.json","includedInParent":true,"mtime":1689085533782},{"name":"./enums","loc":{"line":42,"column":20,"index":2698},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\enums.js"},{"name":"./utils","loc":{"line":43,"column":20,"index":2730},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\utils.js"},{"name":"./shared","loc":{"line":44,"column":23,"index":2765},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\shared.js"},{"name":"./activity-request","loc":{"line":45,"column":33,"index":2811},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\activity-request.js"},{"name":"./strings","loc":{"line":46,"column":24,"index":2858},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\strings.js"},{"name":"./card-elements","loc":{"line":47,"column":30,"index":2902},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\card-elements.js"},{"name":"./serialization","loc":{"line":48,"column":30,"index":2952},"parent":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\adaptive-applet.js","resolved":"C:\\Users\\t-acruau\\node_modules\\adaptivecards\\lib\\serialization.js"}],"generated":{"js":"\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AdaptiveApplet = void 0;\n// Copyright (C) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nvar Enums = require(\"./enums\");\nvar Utils = require(\"./utils\");\nvar shared_1 = require(\"./shared\");\nvar activity_request_1 = require(\"./activity-request\");\nvar strings_1 = require(\"./strings\");\nvar card_elements_1 = require(\"./card-elements\");\nvar serialization_1 = require(\"./serialization\");\nfunction logEvent(level, message) {\n    var optionalParams = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        optionalParams[_i - 2] = arguments[_i];\n    }\n    if (shared_1.GlobalSettings.applets.logEnabled) {\n        if (shared_1.GlobalSettings.applets.onLogEvent) {\n            shared_1.GlobalSettings.applets.onLogEvent(level, message, optionalParams);\n        }\n        else {\n            /* eslint-disable no-console */\n            switch (level) {\n                case Enums.LogLevel.Warning:\n                    console.warn(message, optionalParams);\n                    break;\n                case Enums.LogLevel.Error:\n                    console.error(message, optionalParams);\n                    break;\n                default:\n                    console.log(message, optionalParams);\n                    break;\n            }\n            /* eslint-enable no-console */\n        }\n    }\n}\nvar ActivityRequest = /** @class */ (function () {\n    function ActivityRequest(action, trigger, consecutiveActions) {\n        this.action = action;\n        this.trigger = trigger;\n        this.consecutiveActions = consecutiveActions;\n        this.attemptNumber = 0;\n    }\n    // eslint-disable-next-line @typescript-eslint/require-await\n    ActivityRequest.prototype.retryAsync = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (this.onSend) {\n                    this.onSend(this);\n                }\n                return [2 /*return*/];\n            });\n        });\n    };\n    return ActivityRequest;\n}());\nvar AdaptiveApplet = /** @class */ (function () {\n    function AdaptiveApplet() {\n        this._allowAutomaticCardUpdate = false;\n        this.renderedElement = document.createElement(\"div\");\n        this.renderedElement.className = \"aaf-cardHost\";\n        this.renderedElement.style.position = \"relative\";\n        this.renderedElement.style.display = \"flex\";\n        this.renderedElement.style.flexDirection = \"column\";\n        this._cardHostElement = document.createElement(\"div\");\n        this._refreshButtonHostElement = document.createElement(\"div\");\n        this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";\n        this._refreshButtonHostElement.style.display = \"none\";\n        this.renderedElement.appendChild(this._cardHostElement);\n        this.renderedElement.appendChild(this._refreshButtonHostElement);\n    }\n    AdaptiveApplet.prototype.displayCard = function (card) {\n        if (card.renderedElement) {\n            Utils.clearElementChildren(this._cardHostElement);\n            this._refreshButtonHostElement.style.display = \"none\";\n            this._cardHostElement.appendChild(card.renderedElement);\n        }\n        else {\n            throw new Error(\"displayCard: undefined card.\");\n        }\n    };\n    AdaptiveApplet.prototype.showManualRefreshButton = function (refreshAction) {\n        var _this = this;\n        var displayBuiltInManualRefreshButton = this.onShowManualRefreshButton\n            ? this.onShowManualRefreshButton(this)\n            : true;\n        if (displayBuiltInManualRefreshButton) {\n            this._refreshButtonHostElement.style.display = \"none\";\n            var renderedRefreshButton = undefined;\n            if (this.onRenderManualRefreshButton) {\n                renderedRefreshButton = this.onRenderManualRefreshButton(this);\n            }\n            else {\n                var message = strings_1.Strings.runtime.refreshThisCard();\n                if (shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\n                    var autoRefreshPausedMessage = strings_1.Strings.runtime.automaticRefreshPaused();\n                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\n                        autoRefreshPausedMessage += \" \";\n                    }\n                    message = strings_1.Strings.runtime.clckToRestartAutomaticRefresh();\n                }\n                var cardPayload = {\n                    type: \"AdaptiveCard\",\n                    version: \"1.2\",\n                    body: [\n                        {\n                            type: \"RichTextBlock\",\n                            horizontalAlignment: \"right\",\n                            inlines: [\n                                {\n                                    type: \"TextRun\",\n                                    text: message,\n                                    selectAction: {\n                                        type: \"Action.Submit\",\n                                        id: \"refreshCard\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                };\n                var card = new card_elements_1.AdaptiveCard();\n                card.parse(cardPayload, new card_elements_1.SerializationContext(serialization_1.Versions.v1_2));\n                card.onExecuteAction = function (action) {\n                    if (action.id === \"refreshCard\") {\n                        Utils.clearElementChildren(_this._refreshButtonHostElement);\n                        _this.internalExecuteAction(refreshAction, activity_request_1.ActivityRequestTrigger.Automatic, 0);\n                    }\n                };\n                renderedRefreshButton = card.render();\n            }\n            if (renderedRefreshButton) {\n                Utils.clearElementChildren(this._refreshButtonHostElement);\n                this._refreshButtonHostElement.appendChild(renderedRefreshButton);\n                this._refreshButtonHostElement.style.removeProperty(\"display\");\n            }\n        }\n    };\n    AdaptiveApplet.prototype.createActivityRequest = function (action, trigger, consecutiveActions) {\n        var _this = this;\n        if (this.card) {\n            var request_1 = new ActivityRequest(action, trigger, consecutiveActions);\n            request_1.onSend = function (sender) {\n                sender.attemptNumber++;\n                void _this.internalSendActivityRequestAsync(request_1);\n            };\n            var cancel = this.onPrepareActivityRequest\n                ? !this.onPrepareActivityRequest(this, request_1, action)\n                : false;\n            return cancel ? undefined : request_1;\n        }\n        else {\n            throw new Error(\"createActivityRequest: no card has been set.\");\n        }\n    };\n    AdaptiveApplet.prototype.createMagicCodeInputCard = function (attemptNumber) {\n        var payload = {\n            type: \"AdaptiveCard\",\n            version: \"1.0\",\n            body: [\n                {\n                    type: \"TextBlock\",\n                    color: \"attention\",\n                    text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"TextBlock\",\n                    text: 'Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\"',\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"Input.Text\",\n                    id: \"magicCode\",\n                    placeholder: \"Enter magic code\"\n                },\n                {\n                    type: \"ActionSet\",\n                    horizontalAlignment: \"center\",\n                    actions: [\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet._submitMagicCodeActionId,\n                            title: \"Submit\"\n                        },\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet._cancelMagicCodeAuthActionId,\n                            title: \"Cancel\"\n                        }\n                    ]\n                }\n            ]\n        };\n        var card = new card_elements_1.AdaptiveCard();\n        card.parse(payload);\n        return card;\n    };\n    AdaptiveApplet.prototype.cancelAutomaticRefresh = function () {\n        if (this._allowAutomaticCardUpdate) {\n            logEvent(Enums.LogLevel.Warning, \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\");\n        }\n        this._allowAutomaticCardUpdate = false;\n    };\n    AdaptiveApplet.prototype.createSerializationContext = function () {\n        return this.onCreateSerializationContext\n            ? this.onCreateSerializationContext(this)\n            : new card_elements_1.SerializationContext();\n    };\n    AdaptiveApplet.prototype.internalSetCard = function (payload, consecutiveActions) {\n        var _this = this;\n        if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\n            this._cardPayload = payload;\n        }\n        if (this._cardPayload) {\n            try {\n                var card = new card_elements_1.AdaptiveCard();\n                if (this.hostConfig) {\n                    card.hostConfig = this.hostConfig;\n                }\n                var serializationContext = this.createSerializationContext();\n                card.parse(this._cardPayload, serializationContext);\n                var doChangeCard = this.onCardChanging\n                    ? this.onCardChanging(this, this._cardPayload)\n                    : true;\n                if (doChangeCard) {\n                    this._card = card;\n                    if (this._card.authentication &&\n                        this._card.authentication.tokenExchangeResource &&\n                        this.onPrefetchSSOToken) {\n                        this.onPrefetchSSOToken(this, this._card.authentication.tokenExchangeResource);\n                    }\n                    this._card.onExecuteAction = function (action) {\n                        // If the user takes an action, cancel any pending automatic refresh\n                        _this.cancelAutomaticRefresh();\n                        _this.internalExecuteAction(action, activity_request_1.ActivityRequestTrigger.Manual, 0);\n                    };\n                    this._card.onInputValueChanged = function (input) {\n                        var _a, _b, _c;\n                        // If the user modifies an input, cancel any pending automatic refresh\n                        _this.cancelAutomaticRefresh();\n                        if (input instanceof card_elements_1.ChoiceSetInput && input.isDynamicTypeahead()) {\n                            var filter = input.getFilterForDynamicSearch();\n                            if (filter) {\n                                var dataQueryAction = new card_elements_1.DataQuery();\n                                dataQueryAction.filter = filter;\n                                dataQueryAction.dataset = ((_a = input.choicesData) === null || _a === void 0 ? void 0 : _a.dataset) || \"\";\n                                dataQueryAction.count = (_b = input.choicesData) === null || _b === void 0 ? void 0 : _b.count;\n                                dataQueryAction.skip = (_c = input.choicesData) === null || _c === void 0 ? void 0 : _c.skip;\n                                _this._choiceSet = input;\n                                _this.internalExecuteAction(dataQueryAction, activity_request_1.ActivityRequestTrigger.Manual, 0 // consecutiveActions\n                                );\n                            }\n                        }\n                    };\n                    this._card.render();\n                    if (this._card.renderedElement) {\n                        this.displayCard(this._card);\n                        if (this.onCardChanged) {\n                            this.onCardChanged(this);\n                        }\n                        if (this._card.refresh) {\n                            if (shared_1.GlobalSettings.applets.refresh.mode ===\n                                Enums.RefreshMode.Automatic &&\n                                consecutiveActions <\n                                    shared_1.GlobalSettings.applets.refresh\n                                        .maximumConsecutiveAutomaticRefreshes) {\n                                if (shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <=\n                                    0) {\n                                    logEvent(Enums.LogLevel.Info, \"Triggering automatic card refresh number \" +\n                                        (consecutiveActions + 1));\n                                    this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveActions + 1);\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Info, \"Scheduling automatic card refresh number \" +\n                                        (consecutiveActions + 1) +\n                                        \" in \" +\n                                        shared_1.GlobalSettings.applets.refresh\n                                            .timeBetweenAutomaticRefreshes +\n                                        \"ms\");\n                                    var action_1 = this._card.refresh.action;\n                                    this._allowAutomaticCardUpdate = true;\n                                    window.setTimeout(function () {\n                                        if (_this._allowAutomaticCardUpdate) {\n                                            _this.internalExecuteAction(action_1, activity_request_1.ActivityRequestTrigger.Automatic, consecutiveActions + 1);\n                                        }\n                                    }, shared_1.GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes);\n                                }\n                            }\n                            else if (shared_1.GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled) {\n                                if (consecutiveActions > 0) {\n                                    logEvent(Enums.LogLevel.Warning, \"Stopping automatic refreshes after \" +\n                                        consecutiveActions +\n                                        \" consecutive refreshes.\");\n                                }\n                                else {\n                                    logEvent(Enums.LogLevel.Warning, \"The card has a refresh section, but automatic refreshes are disabled.\");\n                                }\n                                if (shared_1.GlobalSettings.applets.refresh\n                                    .allowManualRefreshesAfterAutomaticRefreshes ||\n                                    shared_1.GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual) {\n                                    logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\n                                    this.showManualRefreshButton(this._card.refresh.action);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            catch (error) {\n                // Ignore all errors\n                logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\n            }\n        }\n    };\n    AdaptiveApplet.prototype.internalExecuteAction = function (action, trigger, consecutiveActions) {\n        if (action instanceof card_elements_1.UniversalAction) {\n            if (this.channelAdapter) {\n                var request = this.createActivityRequest(action, trigger, consecutiveActions);\n                if (request) {\n                    void request.retryAsync();\n                }\n            }\n            else {\n                throw new Error(\"internalExecuteAction: No channel adapter set.\");\n            }\n        }\n        if (this.onAction) {\n            this.onAction(this, action);\n        }\n    };\n    AdaptiveApplet.prototype.createProgressOverlay = function (request) {\n        if (!this._progressOverlay) {\n            if (this.onCreateProgressOverlay) {\n                this._progressOverlay = this.onCreateProgressOverlay(this, request);\n            }\n            else {\n                this._progressOverlay = document.createElement(\"div\");\n                this._progressOverlay.className = \"aaf-progress-overlay\";\n                var spinner = document.createElement(\"div\");\n                spinner.className = \"aaf-spinner\";\n                spinner.style.width = \"28px\";\n                spinner.style.height = \"28px\";\n                this._progressOverlay.appendChild(spinner);\n            }\n        }\n        return this._progressOverlay;\n    };\n    AdaptiveApplet.prototype.removeProgressOverlay = function (request) {\n        if (this.onRemoveProgressOverlay) {\n            this.onRemoveProgressOverlay(this, request);\n        }\n        if (this._progressOverlay !== undefined) {\n            this.renderedElement.removeChild(this._progressOverlay);\n            this._progressOverlay = undefined;\n        }\n    };\n    AdaptiveApplet.prototype.activityRequestSucceeded = function (response, parsedContent) {\n        if (this.onActivityRequestSucceeded) {\n            this.onActivityRequestSucceeded(this, response, parsedContent);\n        }\n    };\n    AdaptiveApplet.prototype.activityRequestFailed = function (response) {\n        return this.onActivityRequestFailed\n            ? this.onActivityRequestFailed(this, response)\n            : shared_1.GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\n    };\n    AdaptiveApplet.prototype.showAuthCodeInputDialog = function (request) {\n        var _this = this;\n        var showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog\n            ? this.onShowAuthCodeInputDialog(this, request)\n            : true;\n        if (showBuiltInAuthCodeInputCard) {\n            var authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\n            authCodeInputCard.render();\n            authCodeInputCard.onExecuteAction = function (submitMagicCodeAction) {\n                if (_this.card && submitMagicCodeAction instanceof card_elements_1.SubmitAction) {\n                    switch (submitMagicCodeAction.id) {\n                        case AdaptiveApplet._submitMagicCodeActionId:\n                            var authCode = undefined;\n                            if (submitMagicCodeAction.data &&\n                                typeof submitMagicCodeAction.data[\"magicCode\"] === \"string\") {\n                                authCode = submitMagicCodeAction.data[\"magicCode\"];\n                            }\n                            if (authCode) {\n                                _this.displayCard(_this.card);\n                                request.authCode = authCode;\n                                void request.retryAsync();\n                            }\n                            else {\n                                alert(\"Please enter the magic code you received.\");\n                            }\n                            break;\n                        case AdaptiveApplet._cancelMagicCodeAuthActionId:\n                            logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\n                            _this.displayCard(_this.card);\n                            break;\n                        default:\n                            logEvent(Enums.LogLevel.Error, \"Unexpected action taken from magic code input card (id = \" +\n                                submitMagicCodeAction.id +\n                                \")\");\n                            alert(strings_1.Strings.magicCodeInputCard.somethingWentWrong());\n                            break;\n                    }\n                }\n            };\n            this.displayCard(authCodeInputCard);\n        }\n    };\n    AdaptiveApplet.prototype.internalSendActivityRequestAsync = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            var action;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.channelAdapter) {\n                            throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\");\n                        }\n                        action = request.action;\n                        if (!(action instanceof card_elements_1.ExecuteAction)) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this.internalSendExecuteRequestAsync(request)];\n                    case 1:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 2:\n                        if (!(action instanceof card_elements_1.DataQuery)) return [3 /*break*/, 4];\n                        return [4 /*yield*/, this.internalSendDataQueryRequestAsync(request)];\n                    case 3:\n                        _a.sent();\n                        return [3 /*break*/, 5];\n                    case 4: throw new Error(\"internalSendActivityRequestAsync: Unhandled Action Type\");\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AdaptiveApplet.prototype.internalSendExecuteRequestAsync = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            var overlay, done, _loop_1, this_1, state_1;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.channelAdapter) {\n                            throw new Error(\"internalSendExecuteRequestAsync: channelAdapter is not set.\");\n                        }\n                        overlay = this.createProgressOverlay(request);\n                        if (overlay !== undefined) {\n                            this.renderedElement.appendChild(overlay);\n                        }\n                        done = false;\n                        _loop_1 = function () {\n                            var response, error_1, parsedContent, retryIn_1, attemptOAuth, left, top_1;\n                            return __generator(this, function (_b) {\n                                switch (_b.label) {\n                                    case 0:\n                                        response = undefined;\n                                        if (request.attemptNumber === 1) {\n                                            logEvent(Enums.LogLevel.Info, \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n                                        }\n                                        else {\n                                            logEvent(Enums.LogLevel.Info, \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\");\n                                        }\n                                        _b.label = 1;\n                                    case 1:\n                                        _b.trys.push([1, 3, , 4]);\n                                        return [4 /*yield*/, this_1.channelAdapter.sendRequestAsync(request)];\n                                    case 2:\n                                        response = _b.sent();\n                                        return [3 /*break*/, 4];\n                                    case 3:\n                                        error_1 = _b.sent();\n                                        logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error_1);\n                                        this_1.removeProgressOverlay(request);\n                                        done = true;\n                                        return [3 /*break*/, 4];\n                                    case 4:\n                                        if (!response) return [3 /*break*/, 10];\n                                        if (!(response instanceof activity_request_1.SuccessResponse)) return [3 /*break*/, 5];\n                                        this_1.removeProgressOverlay(request);\n                                        if (response.rawContent === undefined) {\n                                            throw new Error(\"internalSendExecuteRequestAsync: Action.Execute result is undefined\");\n                                        }\n                                        parsedContent = response.rawContent;\n                                        try {\n                                            parsedContent = JSON.parse(response.rawContent);\n                                        }\n                                        catch (_c) {\n                                            // Leave parseContent as is\n                                        }\n                                        if (typeof parsedContent === \"string\") {\n                                            logEvent(Enums.LogLevel.Info, \"The activity request returned a string after \" +\n                                                request.attemptNumber +\n                                                \" attempt(s).\");\n                                            this_1.activityRequestSucceeded(response, parsedContent);\n                                        }\n                                        else if (typeof parsedContent === \"object\" &&\n                                            parsedContent[\"type\"] === \"AdaptiveCard\") {\n                                            logEvent(Enums.LogLevel.Info, \"The activity request returned an Adaptive Card after \" +\n                                                request.attemptNumber +\n                                                \" attempt(s).\");\n                                            this_1.internalSetCard(parsedContent, request.consecutiveActions);\n                                            this_1.activityRequestSucceeded(response, this_1.card);\n                                        }\n                                        else {\n                                            throw new Error(\"internalSendExecuteRequestAsync: Action.Execute result is of unsupported type (\" +\n                                                typeof response.rawContent +\n                                                \")\");\n                                        }\n                                        done = true;\n                                        return [3 /*break*/, 10];\n                                    case 5:\n                                        if (!(response instanceof activity_request_1.ErrorResponse)) return [3 /*break*/, 9];\n                                        retryIn_1 = this_1.activityRequestFailed(response);\n                                        if (!(retryIn_1 >= 0 &&\n                                            request.attemptNumber < shared_1.GlobalSettings.applets.maximumRetryAttempts)) return [3 /*break*/, 7];\n                                        logEvent(Enums.LogLevel.Warning, \"Activity request failed: \".concat(response.error.message, \". Retrying in \").concat(retryIn_1, \"ms\"));\n                                        request.attemptNumber++;\n                                        return [4 /*yield*/, new Promise(function (resolve, _reject) {\n                                                window.setTimeout(function () {\n                                                    resolve();\n                                                }, retryIn_1);\n                                            })];\n                                    case 6:\n                                        _b.sent();\n                                        return [3 /*break*/, 8];\n                                    case 7:\n                                        logEvent(Enums.LogLevel.Error, \"Activity request failed: \".concat(response.error.message, \". Giving up after \").concat(request.attemptNumber, \" attempt(s)\"));\n                                        this_1.removeProgressOverlay(request);\n                                        done = true;\n                                        _b.label = 8;\n                                    case 8: return [3 /*break*/, 10];\n                                    case 9:\n                                        if (response instanceof activity_request_1.LoginRequestResponse) {\n                                            logEvent(Enums.LogLevel.Info, \"The activity request returned a LoginRequestResponse after \" +\n                                                request.attemptNumber +\n                                                \" attempt(s).\");\n                                            if (request.attemptNumber <= shared_1.GlobalSettings.applets.maximumRetryAttempts) {\n                                                attemptOAuth = true;\n                                                if (response.tokenExchangeResource && this_1.onSSOTokenNeeded) {\n                                                    // Attempt to use SSO. The host will return true if it can handle SSO, in which case\n                                                    // we bypass OAuth\n                                                    attemptOAuth = !this_1.onSSOTokenNeeded(this_1, request, response.tokenExchangeResource);\n                                                }\n                                                if (attemptOAuth) {\n                                                    // Attempt to use OAuth\n                                                    this_1.removeProgressOverlay(request);\n                                                    if (response.signinButton === undefined) {\n                                                        throw new Error(\"internalSendExecuteRequestAsync: the login request doesn't contain a valid signin URL.\");\n                                                    }\n                                                    logEvent(Enums.LogLevel.Info, \"Login required at \" + response.signinButton.value);\n                                                    if (this_1.onShowSigninPrompt) {\n                                                        // Bypass the built-in auth prompt if the host app handles it\n                                                        this_1.onShowSigninPrompt(this_1, request, response.signinButton);\n                                                    }\n                                                    else {\n                                                        this_1.showAuthCodeInputDialog(request);\n                                                        left = window.screenX +\n                                                            (window.outerWidth - shared_1.GlobalSettings.applets.authPromptWidth) /\n                                                                2;\n                                                        top_1 = window.screenY +\n                                                            (window.outerHeight - shared_1.GlobalSettings.applets.authPromptHeight) /\n                                                                2;\n                                                        window.open(response.signinButton.value, response.signinButton.title\n                                                            ? response.signinButton.title\n                                                            : \"Sign in\", \"width=\".concat(shared_1.GlobalSettings.applets.authPromptWidth, \",height=\").concat(shared_1.GlobalSettings.applets.authPromptHeight, \",left=\").concat(left, \",top=\").concat(top_1));\n                                                    }\n                                                }\n                                            }\n                                            else {\n                                                logEvent(Enums.LogLevel.Error, \"Authentication failed. Giving up after \" +\n                                                    request.attemptNumber +\n                                                    \" attempt(s)\");\n                                                alert(strings_1.Strings.magicCodeInputCard.authenticationFailed());\n                                            }\n                                            return [2 /*return*/, \"break\"];\n                                        }\n                                        else {\n                                            throw new Error(\"Unhandled response type: \" + JSON.stringify(response));\n                                        }\n                                        _b.label = 10;\n                                    case 10: return [2 /*return*/];\n                                }\n                            });\n                        };\n                        this_1 = this;\n                        _a.label = 1;\n                    case 1:\n                        if (!!done) return [3 /*break*/, 3];\n                        return [5 /*yield**/, _loop_1()];\n                    case 2:\n                        state_1 = _a.sent();\n                        if (state_1 === \"break\")\n                            return [3 /*break*/, 3];\n                        return [3 /*break*/, 1];\n                    case 3: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AdaptiveApplet.prototype.internalSendDataQueryRequestAsync = function (request) {\n        return __awaiter(this, void 0, void 0, function () {\n            var filter, response, error_2, rawResponse, parsedResponse;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.channelAdapter) {\n                            throw new Error(\"internalSendDataQueryRequestAsync: channel adapter not set\");\n                        }\n                        filter = request.action.filter;\n                        if (!this._choiceSet) return [3 /*break*/, 5];\n                        this._choiceSet.showLoadingIndicator();\n                        response = undefined;\n                        _a.label = 1;\n                    case 1:\n                        _a.trys.push([1, 3, , 4]);\n                        return [4 /*yield*/, this.channelAdapter.sendRequestAsync(request)];\n                    case 2:\n                        response = _a.sent();\n                        return [3 /*break*/, 4];\n                    case 3:\n                        error_2 = _a.sent();\n                        this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                        logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error_2);\n                        return [3 /*break*/, 4];\n                    case 4:\n                        if (response) {\n                            if (response instanceof activity_request_1.SuccessResponse) {\n                                rawResponse = response.rawContent;\n                                if (rawResponse) {\n                                    parsedResponse = void 0;\n                                    try {\n                                        parsedResponse = JSON.parse(rawResponse);\n                                    }\n                                    catch (error) {\n                                        this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                                        throw new Error(\"internalSendDataQueryRequestAsync: Cannot parse response object: \" +\n                                            rawResponse);\n                                    }\n                                    if (typeof parsedResponse === \"object\") {\n                                        this._choiceSet.renderChoices(filter, parsedResponse);\n                                        this.activityRequestSucceeded(response, rawResponse);\n                                    }\n                                    else {\n                                        this._choiceSet.showErrorIndicator(filter, \"Error loading results\");\n                                        throw new Error(\"internalSendDataQueryRequestAsync: Data.Query result is of unsupported type (\" +\n                                            typeof rawResponse +\n                                            \")\");\n                                    }\n                                }\n                                else {\n                                    this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                                    throw new Error(\"internalSendDataQueryRequestAsync: Data.Query result is undefined\");\n                                }\n                            }\n                            else if (response instanceof activity_request_1.ErrorResponse) {\n                                this._choiceSet.showErrorIndicator(filter, response.error.message || \"Error loading results\");\n                                logEvent(Enums.LogLevel.Error, \"Activity request failed: \".concat(response.error.message, \".\"));\n                                this.activityRequestFailed(response);\n                            }\n                            else {\n                                this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                                throw new Error(\"Unhandled response type: \" + JSON.stringify(response));\n                            }\n                        }\n                        else {\n                            this._choiceSet.removeLoadingIndicator();\n                        }\n                        _a.label = 5;\n                    case 5: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    AdaptiveApplet.prototype.refreshCard = function () {\n        if (this._card && this._card.refresh) {\n            this.internalExecuteAction(this._card.refresh.action, activity_request_1.ActivityRequestTrigger.Manual, 0);\n        }\n    };\n    AdaptiveApplet.prototype.setCard = function (payload) {\n        this.internalSetCard(payload, 0);\n    };\n    Object.defineProperty(AdaptiveApplet.prototype, \"card\", {\n        get: function () {\n            return this._card;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    AdaptiveApplet._submitMagicCodeActionId = \"submitMagicCode\";\n    AdaptiveApplet._cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\n    return AdaptiveApplet;\n}());\nexports.AdaptiveApplet = AdaptiveApplet;\n"},"sourceMaps":{"js":{"version":3,"file":"adaptive-applet.js","sourceRoot":"","sources":["../src/adaptive-applet.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (C) Microsoft Corporation. All rights reserved.\n// Licensed under the MIT License.\nimport * as Enums from \"./enums\";\nimport * as Utils from \"./utils\";\nimport { GlobalSettings } from \"./shared\";\nimport { ChannelAdapter } from \"./channel-adapter\";\nimport {\n    ActivityResponse,\n    IActivityRequest,\n    ActivityRequestTrigger,\n    SuccessResponse,\n    ErrorResponse,\n    LoginRequestResponse\n} from \"./activity-request\";\nimport { Strings } from \"./strings\";\nimport {\n    SubmitAction,\n    ExecuteAction,\n    SerializationContext,\n    AdaptiveCard,\n    Action,\n    Input,\n    TokenExchangeResource,\n    AuthCardButton,\n    UniversalAction,\n    ChoiceSetInput,\n    DataQuery\n} from \"./card-elements\";\nimport { Versions } from \"./serialization\";\nimport { HostConfig } from \"./host-config\";\n\nfunction logEvent(level: Enums.LogLevel, message?: any, ...optionalParams: any[]) {\n    if (GlobalSettings.applets.logEnabled) {\n        if (GlobalSettings.applets.onLogEvent) {\n            GlobalSettings.applets.onLogEvent(level, message, optionalParams);\n        } else {\n            /* eslint-disable no-console */\n            switch (level) {\n                case Enums.LogLevel.Warning:\n                    console.warn(message, optionalParams);\n                    break;\n                case Enums.LogLevel.Error:\n                    console.error(message, optionalParams);\n                    break;\n                default:\n                    console.log(message, optionalParams);\n                    break;\n            }\n            /* eslint-enable no-console */\n        }\n    }\n}\n\nclass ActivityRequest implements IActivityRequest {\n    constructor(\n        readonly action: UniversalAction,\n        readonly trigger: ActivityRequestTrigger,\n        readonly consecutiveActions: number\n    ) {}\n\n    authCode?: string;\n    authToken?: string;\n    attemptNumber: number = 0;\n\n    onSend: (sender: ActivityRequest) => void;\n\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async retryAsync(): Promise<void> {\n        if (this.onSend) {\n            this.onSend(this);\n        }\n    }\n}\n\nexport class AdaptiveApplet {\n    private static readonly _submitMagicCodeActionId = \"submitMagicCode\";\n    private static readonly _cancelMagicCodeAuthActionId = \"cancelMagicCodeAuth\";\n\n    private _card?: AdaptiveCard;\n    private _cardPayload: any;\n    private _choiceSet?: ChoiceSetInput;\n    private _allowAutomaticCardUpdate: boolean = false;\n    private _refreshButtonHostElement: HTMLElement;\n    private _cardHostElement: HTMLElement;\n    private _progressOverlay?: HTMLElement;\n\n    private displayCard(card: AdaptiveCard) {\n        if (card.renderedElement) {\n            Utils.clearElementChildren(this._cardHostElement);\n\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            this._cardHostElement.appendChild(card.renderedElement);\n        } else {\n            throw new Error(\"displayCard: undefined card.\");\n        }\n    }\n\n    private showManualRefreshButton(refreshAction: ExecuteAction) {\n        const displayBuiltInManualRefreshButton = this.onShowManualRefreshButton\n            ? this.onShowManualRefreshButton(this)\n            : true;\n\n        if (displayBuiltInManualRefreshButton) {\n            this._refreshButtonHostElement.style.display = \"none\";\n\n            let renderedRefreshButton: HTMLElement | undefined = undefined;\n\n            if (this.onRenderManualRefreshButton) {\n                renderedRefreshButton = this.onRenderManualRefreshButton(this);\n            } else {\n                let message = Strings.runtime.refreshThisCard();\n\n                if (GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Automatic) {\n                    let autoRefreshPausedMessage = Strings.runtime.automaticRefreshPaused();\n\n                    if (autoRefreshPausedMessage[autoRefreshPausedMessage.length - 1] !== \" \") {\n                        autoRefreshPausedMessage += \" \";\n                    }\n\n                    message = Strings.runtime.clckToRestartAutomaticRefresh();\n                }\n\n                const cardPayload = {\n                    type: \"AdaptiveCard\",\n                    version: \"1.2\",\n                    body: [\n                        {\n                            type: \"RichTextBlock\",\n                            horizontalAlignment: \"right\",\n                            inlines: [\n                                {\n                                    type: \"TextRun\",\n                                    text: message,\n                                    selectAction: {\n                                        type: \"Action.Submit\",\n                                        id: \"refreshCard\"\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                };\n\n                const card = new AdaptiveCard();\n                card.parse(cardPayload, new SerializationContext(Versions.v1_2));\n                card.onExecuteAction = (action: Action) => {\n                    if (action.id === \"refreshCard\") {\n                        Utils.clearElementChildren(this._refreshButtonHostElement);\n\n                        this.internalExecuteAction(\n                            refreshAction,\n                            ActivityRequestTrigger.Automatic,\n                            0\n                        );\n                    }\n                };\n\n                renderedRefreshButton = card.render();\n            }\n\n            if (renderedRefreshButton) {\n                Utils.clearElementChildren(this._refreshButtonHostElement);\n\n                this._refreshButtonHostElement.appendChild(renderedRefreshButton);\n\n                this._refreshButtonHostElement.style.removeProperty(\"display\");\n            }\n        }\n    }\n\n    private createActivityRequest(\n        action: UniversalAction,\n        trigger: ActivityRequestTrigger,\n        consecutiveActions: number\n    ): ActivityRequest | undefined {\n        if (this.card) {\n            const request = new ActivityRequest(action, trigger, consecutiveActions);\n            request.onSend = (sender: ActivityRequest) => {\n                sender.attemptNumber++;\n\n                void this.internalSendActivityRequestAsync(request);\n            };\n\n            const cancel = this.onPrepareActivityRequest\n                ? !this.onPrepareActivityRequest(this, request, action)\n                : false;\n\n            return cancel ? undefined : request;\n        } else {\n            throw new Error(\"createActivityRequest: no card has been set.\");\n        }\n    }\n\n    private createMagicCodeInputCard(attemptNumber: number): AdaptiveCard {\n        const payload = {\n            type: \"AdaptiveCard\",\n            version: \"1.0\",\n            body: [\n                {\n                    type: \"TextBlock\",\n                    color: \"attention\",\n                    text: attemptNumber === 1 ? undefined : \"That didn't work... let's try again.\",\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"TextBlock\",\n                    text: 'Please login in the popup. You will obtain a magic code. Paste that code below and select \"Submit\"',\n                    wrap: true,\n                    horizontalAlignment: \"center\"\n                },\n                {\n                    type: \"Input.Text\",\n                    id: \"magicCode\",\n                    placeholder: \"Enter magic code\"\n                },\n                {\n                    type: \"ActionSet\",\n                    horizontalAlignment: \"center\",\n                    actions: [\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet._submitMagicCodeActionId,\n                            title: \"Submit\"\n                        },\n                        {\n                            type: \"Action.Submit\",\n                            id: AdaptiveApplet._cancelMagicCodeAuthActionId,\n                            title: \"Cancel\"\n                        }\n                    ]\n                }\n            ]\n        };\n\n        const card = new AdaptiveCard();\n        card.parse(payload);\n\n        return card;\n    }\n\n    private cancelAutomaticRefresh() {\n        if (this._allowAutomaticCardUpdate) {\n            logEvent(\n                Enums.LogLevel.Warning,\n                \"Automatic card refresh has been cancelled as a result of the user interacting with the card.\"\n            );\n        }\n\n        this._allowAutomaticCardUpdate = false;\n    }\n\n    private createSerializationContext(): SerializationContext {\n        return this.onCreateSerializationContext\n            ? this.onCreateSerializationContext(this)\n            : new SerializationContext();\n    }\n\n    private internalSetCard(payload: any, consecutiveActions: number) {\n        if (typeof payload === \"object\" && payload[\"type\"] === \"AdaptiveCard\") {\n            this._cardPayload = payload;\n        }\n\n        if (this._cardPayload) {\n            try {\n                const card = new AdaptiveCard();\n\n                if (this.hostConfig) {\n                    card.hostConfig = this.hostConfig;\n                }\n\n                const serializationContext = this.createSerializationContext();\n\n                card.parse(this._cardPayload, serializationContext);\n\n                const doChangeCard = this.onCardChanging\n                    ? this.onCardChanging(this, this._cardPayload)\n                    : true;\n\n                if (doChangeCard) {\n                    this._card = card;\n\n                    if (\n                        this._card.authentication &&\n                        this._card.authentication.tokenExchangeResource &&\n                        this.onPrefetchSSOToken\n                    ) {\n                        this.onPrefetchSSOToken(\n                            this,\n                            this._card.authentication.tokenExchangeResource\n                        );\n                    }\n\n                    this._card.onExecuteAction = (action: Action) => {\n                        // If the user takes an action, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n\n                        this.internalExecuteAction(action, ActivityRequestTrigger.Manual, 0);\n                    };\n                    this._card.onInputValueChanged = (input: Input) => {\n                        // If the user modifies an input, cancel any pending automatic refresh\n                        this.cancelAutomaticRefresh();\n                        if (input instanceof ChoiceSetInput && input.isDynamicTypeahead()) {\n                            const filter = input.getFilterForDynamicSearch();\n                            if (filter) {\n                                const dataQueryAction = new DataQuery();\n                                dataQueryAction.filter = filter;\n                                dataQueryAction.dataset = input.choicesData?.dataset || \"\";\n                                dataQueryAction.count = input.choicesData?.count;\n                                dataQueryAction.skip = input.choicesData?.skip;\n\n                                this._choiceSet = input;\n                                this.internalExecuteAction(\n                                    dataQueryAction,\n                                    ActivityRequestTrigger.Manual,\n                                    0 // consecutiveActions\n                                );\n                            }\n                        }\n                    };\n\n                    this._card.render();\n\n                    if (this._card.renderedElement) {\n                        this.displayCard(this._card);\n\n                        if (this.onCardChanged) {\n                            this.onCardChanged(this);\n                        }\n\n                        if (this._card.refresh) {\n                            if (\n                                GlobalSettings.applets.refresh.mode ===\n                                    Enums.RefreshMode.Automatic &&\n                                consecutiveActions <\n                                    GlobalSettings.applets.refresh\n                                        .maximumConsecutiveAutomaticRefreshes\n                            ) {\n                                if (\n                                    GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes <=\n                                    0\n                                ) {\n                                    logEvent(\n                                        Enums.LogLevel.Info,\n                                        \"Triggering automatic card refresh number \" +\n                                            (consecutiveActions + 1)\n                                    );\n\n                                    this.internalExecuteAction(\n                                        this._card.refresh.action,\n                                        ActivityRequestTrigger.Automatic,\n                                        consecutiveActions + 1\n                                    );\n                                } else {\n                                    logEvent(\n                                        Enums.LogLevel.Info,\n                                        \"Scheduling automatic card refresh number \" +\n                                            (consecutiveActions + 1) +\n                                            \" in \" +\n                                            GlobalSettings.applets.refresh\n                                                .timeBetweenAutomaticRefreshes +\n                                            \"ms\"\n                                    );\n\n                                    const action = this._card.refresh.action;\n\n                                    this._allowAutomaticCardUpdate = true;\n\n                                    window.setTimeout(() => {\n                                        if (this._allowAutomaticCardUpdate) {\n                                            this.internalExecuteAction(\n                                                action,\n                                                ActivityRequestTrigger.Automatic,\n                                                consecutiveActions + 1\n                                            );\n                                        }\n                                    }, GlobalSettings.applets.refresh.timeBetweenAutomaticRefreshes);\n                                }\n                            } else if (\n                                GlobalSettings.applets.refresh.mode !== Enums.RefreshMode.Disabled\n                            ) {\n                                if (consecutiveActions > 0) {\n                                    logEvent(\n                                        Enums.LogLevel.Warning,\n                                        \"Stopping automatic refreshes after \" +\n                                            consecutiveActions +\n                                            \" consecutive refreshes.\"\n                                    );\n                                } else {\n                                    logEvent(\n                                        Enums.LogLevel.Warning,\n                                        \"The card has a refresh section, but automatic refreshes are disabled.\"\n                                    );\n                                }\n\n                                if (\n                                    GlobalSettings.applets.refresh\n                                        .allowManualRefreshesAfterAutomaticRefreshes ||\n                                    GlobalSettings.applets.refresh.mode === Enums.RefreshMode.Manual\n                                ) {\n                                    logEvent(Enums.LogLevel.Info, \"Showing manual refresh button.\");\n\n                                    this.showManualRefreshButton(this._card.refresh.action);\n                                }\n                            }\n                        }\n                    }\n                }\n            } catch (error) {\n                // Ignore all errors\n                logEvent(Enums.LogLevel.Error, \"setCard: \" + error);\n            }\n        }\n    }\n\n    private internalExecuteAction(\n        action: Action,\n        trigger: ActivityRequestTrigger,\n        consecutiveActions: number\n    ) {\n        if (action instanceof UniversalAction) {\n            if (this.channelAdapter) {\n                const request = this.createActivityRequest(action, trigger, consecutiveActions);\n\n                if (request) {\n                    void request.retryAsync();\n                }\n            } else {\n                throw new Error(\"internalExecuteAction: No channel adapter set.\");\n            }\n        }\n\n        if (this.onAction) {\n            this.onAction(this, action);\n        }\n    }\n\n    private createProgressOverlay(request: ActivityRequest): HTMLElement | undefined {\n        if (!this._progressOverlay) {\n            if (this.onCreateProgressOverlay) {\n                this._progressOverlay = this.onCreateProgressOverlay(this, request);\n            } else {\n                this._progressOverlay = document.createElement(\"div\");\n                this._progressOverlay.className = \"aaf-progress-overlay\";\n\n                const spinner = document.createElement(\"div\");\n                spinner.className = \"aaf-spinner\";\n                spinner.style.width = \"28px\";\n                spinner.style.height = \"28px\";\n\n                this._progressOverlay.appendChild(spinner);\n            }\n        }\n\n        return this._progressOverlay;\n    }\n\n    private removeProgressOverlay(request: IActivityRequest) {\n        if (this.onRemoveProgressOverlay) {\n            this.onRemoveProgressOverlay(this, request);\n        }\n\n        if (this._progressOverlay !== undefined) {\n            this.renderedElement.removeChild(this._progressOverlay);\n\n            this._progressOverlay = undefined;\n        }\n    }\n\n    private activityRequestSucceeded(\n        response: SuccessResponse,\n        parsedContent: string | AdaptiveCard | undefined\n    ) {\n        if (this.onActivityRequestSucceeded) {\n            this.onActivityRequestSucceeded(this, response, parsedContent);\n        }\n    }\n\n    private activityRequestFailed(response: ErrorResponse): number {\n        return this.onActivityRequestFailed\n            ? this.onActivityRequestFailed(this, response)\n            : GlobalSettings.applets.defaultTimeBetweenRetryAttempts;\n    }\n\n    private showAuthCodeInputDialog(request: ActivityRequest) {\n        const showBuiltInAuthCodeInputCard = this.onShowAuthCodeInputDialog\n            ? this.onShowAuthCodeInputDialog(this, request)\n            : true;\n\n        if (showBuiltInAuthCodeInputCard) {\n            const authCodeInputCard = this.createMagicCodeInputCard(request.attemptNumber);\n            authCodeInputCard.render();\n            authCodeInputCard.onExecuteAction = (submitMagicCodeAction: Action) => {\n                if (this.card && submitMagicCodeAction instanceof SubmitAction) {\n                    switch (submitMagicCodeAction.id) {\n                        case AdaptiveApplet._submitMagicCodeActionId:\n                            let authCode: string | undefined = undefined;\n\n                            if (\n                                submitMagicCodeAction.data &&\n                                typeof (<any>submitMagicCodeAction.data)[\"magicCode\"] === \"string\"\n                            ) {\n                                authCode = (<any>submitMagicCodeAction.data)[\"magicCode\"];\n                            }\n\n                            if (authCode) {\n                                this.displayCard(this.card);\n\n                                request.authCode = authCode;\n                                void request.retryAsync();\n                            } else {\n                                alert(\"Please enter the magic code you received.\");\n                            }\n\n                            break;\n                        case AdaptiveApplet._cancelMagicCodeAuthActionId:\n                            logEvent(Enums.LogLevel.Warning, \"Authentication cancelled by user.\");\n\n                            this.displayCard(this.card);\n\n                            break;\n                        default:\n                            logEvent(\n                                Enums.LogLevel.Error,\n                                \"Unexpected action taken from magic code input card (id = \" +\n                                    submitMagicCodeAction.id +\n                                    \")\"\n                            );\n\n                            alert(Strings.magicCodeInputCard.somethingWentWrong());\n\n                            break;\n                    }\n                }\n            };\n\n            this.displayCard(authCodeInputCard);\n        }\n    }\n\n    private async internalSendActivityRequestAsync(request: ActivityRequest) {\n        if (!this.channelAdapter) {\n            throw new Error(\"internalSendActivityRequestAsync: channelAdapter is not set.\");\n        }\n        const { action } = request;\n        if (action instanceof ExecuteAction) {\n            await this.internalSendExecuteRequestAsync(request);\n        } else if (action instanceof DataQuery) {\n            await this.internalSendDataQueryRequestAsync(request);\n        } else {\n            throw new Error(\"internalSendActivityRequestAsync: Unhandled Action Type\");\n        }\n    }\n\n    private async internalSendExecuteRequestAsync(request: ActivityRequest) {\n        if (!this.channelAdapter) {\n            throw new Error(\"internalSendExecuteRequestAsync: channelAdapter is not set.\");\n        }\n\n        const overlay = this.createProgressOverlay(request);\n\n        if (overlay !== undefined) {\n            this.renderedElement.appendChild(overlay);\n        }\n\n        let done = false;\n\n        while (!done) {\n            let response: ActivityResponse | undefined = undefined;\n\n            if (request.attemptNumber === 1) {\n                logEvent(\n                    Enums.LogLevel.Info,\n                    \"Sending activity request to channel (attempt \" + request.attemptNumber + \")\"\n                );\n            } else {\n                logEvent(\n                    Enums.LogLevel.Info,\n                    \"Re-sending activity request to channel (attempt \" + request.attemptNumber + \")\"\n                );\n            }\n\n            try {\n                response = await this.channelAdapter.sendRequestAsync(request);\n            } catch (error) {\n                logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error);\n\n                this.removeProgressOverlay(request);\n\n                done = true;\n            }\n\n            if (response) {\n                if (response instanceof SuccessResponse) {\n                    this.removeProgressOverlay(request);\n\n                    if (response.rawContent === undefined) {\n                        throw new Error(\n                            \"internalSendExecuteRequestAsync: Action.Execute result is undefined\"\n                        );\n                    }\n\n                    let parsedContent = response.rawContent;\n\n                    try {\n                        parsedContent = JSON.parse(response.rawContent);\n                    } catch {\n                        // Leave parseContent as is\n                    }\n\n                    if (typeof parsedContent === \"string\") {\n                        logEvent(\n                            Enums.LogLevel.Info,\n                            \"The activity request returned a string after \" +\n                                request.attemptNumber +\n                                \" attempt(s).\"\n                        );\n\n                        this.activityRequestSucceeded(response, parsedContent);\n                    } else if (\n                        typeof parsedContent === \"object\" &&\n                        parsedContent[\"type\"] === \"AdaptiveCard\"\n                    ) {\n                        logEvent(\n                            Enums.LogLevel.Info,\n                            \"The activity request returned an Adaptive Card after \" +\n                                request.attemptNumber +\n                                \" attempt(s).\"\n                        );\n\n                        this.internalSetCard(parsedContent, request.consecutiveActions);\n                        this.activityRequestSucceeded(response, this.card);\n                    } else {\n                        throw new Error(\n                            \"internalSendExecuteRequestAsync: Action.Execute result is of unsupported type (\" +\n                                typeof response.rawContent +\n                                \")\"\n                        );\n                    }\n\n                    done = true;\n                } else if (response instanceof ErrorResponse) {\n                    const retryIn: number = this.activityRequestFailed(response);\n\n                    if (\n                        retryIn >= 0 &&\n                        request.attemptNumber < GlobalSettings.applets.maximumRetryAttempts\n                    ) {\n                        logEvent(\n                            Enums.LogLevel.Warning,\n                            `Activity request failed: ${response.error.message}. Retrying in ${retryIn}ms`\n                        );\n\n                        request.attemptNumber++;\n\n                        await new Promise<void>((resolve, _reject) => {\n                            window.setTimeout(() => {\n                                resolve();\n                            }, retryIn);\n                        });\n                    } else {\n                        logEvent(\n                            Enums.LogLevel.Error,\n                            `Activity request failed: ${response.error.message}. Giving up after ${request.attemptNumber} attempt(s)`\n                        );\n\n                        this.removeProgressOverlay(request);\n\n                        done = true;\n                    }\n                } else if (response instanceof LoginRequestResponse) {\n                    logEvent(\n                        Enums.LogLevel.Info,\n                        \"The activity request returned a LoginRequestResponse after \" +\n                            request.attemptNumber +\n                            \" attempt(s).\"\n                    );\n\n                    if (request.attemptNumber <= GlobalSettings.applets.maximumRetryAttempts) {\n                        let attemptOAuth = true;\n\n                        if (response.tokenExchangeResource && this.onSSOTokenNeeded) {\n                            // Attempt to use SSO. The host will return true if it can handle SSO, in which case\n                            // we bypass OAuth\n                            attemptOAuth = !this.onSSOTokenNeeded(\n                                this,\n                                request,\n                                response.tokenExchangeResource\n                            );\n                        }\n\n                        if (attemptOAuth) {\n                            // Attempt to use OAuth\n                            this.removeProgressOverlay(request);\n\n                            if (response.signinButton === undefined) {\n                                throw new Error(\n                                    \"internalSendExecuteRequestAsync: the login request doesn't contain a valid signin URL.\"\n                                );\n                            }\n\n                            logEvent(\n                                Enums.LogLevel.Info,\n                                \"Login required at \" + response.signinButton.value\n                            );\n\n                            if (this.onShowSigninPrompt) {\n                                // Bypass the built-in auth prompt if the host app handles it\n                                this.onShowSigninPrompt(this, request, response.signinButton);\n                            } else {\n                                this.showAuthCodeInputDialog(request);\n\n                                const left =\n                                    window.screenX +\n                                    (window.outerWidth - GlobalSettings.applets.authPromptWidth) /\n                                        2;\n                                const top =\n                                    window.screenY +\n                                    (window.outerHeight - GlobalSettings.applets.authPromptHeight) /\n                                        2;\n\n                                window.open(\n                                    response.signinButton.value,\n                                    response.signinButton.title\n                                        ? response.signinButton.title\n                                        : \"Sign in\",\n                                    `width=${GlobalSettings.applets.authPromptWidth},height=${GlobalSettings.applets.authPromptHeight},left=${left},top=${top}`\n                                );\n                            }\n                        }\n                    } else {\n                        logEvent(\n                            Enums.LogLevel.Error,\n                            \"Authentication failed. Giving up after \" +\n                                request.attemptNumber +\n                                \" attempt(s)\"\n                        );\n\n                        alert(Strings.magicCodeInputCard.authenticationFailed());\n                    }\n\n                    // Exit the loop. After a LoginRequestResponse, the host app is responsible for retrying the request\n                    break;\n                } else {\n                    throw new Error(\"Unhandled response type: \" + JSON.stringify(response));\n                }\n            }\n        }\n    }\n\n    private async internalSendDataQueryRequestAsync(request: ActivityRequest) {\n        if (!this.channelAdapter) {\n            throw new Error(\"internalSendDataQueryRequestAsync: channel adapter not set\");\n        }\n        const filter = (request.action as DataQuery).filter;\n        if (this._choiceSet) {\n            this._choiceSet.showLoadingIndicator();\n            let response: ActivityResponse | undefined = undefined;\n            try {\n                response = await this.channelAdapter.sendRequestAsync(request);\n            } catch (error) {\n                this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                logEvent(Enums.LogLevel.Error, \"Activity request failed: \" + error);\n            }\n            if (response) {\n                if (response instanceof SuccessResponse) {\n                    const rawResponse = response.rawContent;\n                    if (rawResponse) {\n                        let parsedResponse;\n                        try {\n                            parsedResponse = JSON.parse(rawResponse);\n                        } catch (error) {\n                            this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                            throw new Error(\n                                \"internalSendDataQueryRequestAsync: Cannot parse response object: \" +\n                                    rawResponse\n                            );\n                        }\n                        if (typeof parsedResponse === \"object\") {\n                            this._choiceSet.renderChoices(filter, parsedResponse);\n                            this.activityRequestSucceeded(response, rawResponse);\n                        } else {\n                            this._choiceSet.showErrorIndicator(filter, \"Error loading results\");\n                            throw new Error(\n                                \"internalSendDataQueryRequestAsync: Data.Query result is of unsupported type (\" +\n                                    typeof rawResponse +\n                                    \")\"\n                            );\n                        }\n                    } else {\n                        this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                        throw new Error(\n                            \"internalSendDataQueryRequestAsync: Data.Query result is undefined\"\n                        );\n                    }\n                } else if (response instanceof ErrorResponse) {\n                    this._choiceSet.showErrorIndicator(\n                        filter,\n                        response.error.message || \"Error loading results\"\n                    );\n                    logEvent(\n                        Enums.LogLevel.Error,\n                        `Activity request failed: ${response.error.message}.`\n                    );\n                    this.activityRequestFailed(response);\n                } else {\n                    this._choiceSet.showErrorIndicator(filter, \"Unable to load\");\n                    throw new Error(\"Unhandled response type: \" + JSON.stringify(response));\n                }\n            } else {\n                this._choiceSet.removeLoadingIndicator();\n            }\n        }\n    }\n\n    readonly renderedElement: HTMLElement;\n\n    hostConfig?: HostConfig;\n    channelAdapter?: ChannelAdapter;\n\n    onCardChanging?: (sender: AdaptiveApplet, card: any) => boolean;\n    onCardChanged?: (sender: AdaptiveApplet) => void;\n    onPrefetchSSOToken?: (\n        sender: AdaptiveApplet,\n        tokenExchangeResource: TokenExchangeResource\n    ) => void;\n    onSSOTokenNeeded?: (\n        sender: AdaptiveApplet,\n        request: IActivityRequest,\n        tokenExchangeResource: TokenExchangeResource\n    ) => boolean;\n    onPrepareActivityRequest?: (\n        sender: AdaptiveApplet,\n        request: IActivityRequest,\n        action: UniversalAction\n    ) => boolean;\n    onActivityRequestSucceeded?: (\n        sender: AdaptiveApplet,\n        response: SuccessResponse,\n        parsedContent: string | AdaptiveCard | undefined\n    ) => void;\n    onActivityRequestFailed?: (sender: AdaptiveApplet, response: ErrorResponse) => number;\n    onCreateSerializationContext?: (sender: AdaptiveApplet) => SerializationContext;\n    onCreateProgressOverlay?: (\n        sender: AdaptiveApplet,\n        request: IActivityRequest\n    ) => HTMLElement | undefined;\n    onRemoveProgressOverlay?: (sender: AdaptiveApplet, request: IActivityRequest) => void;\n    onRenderManualRefreshButton?: (sender: AdaptiveApplet) => HTMLElement | undefined;\n    onAction?: (sender: AdaptiveApplet, action: Action) => void;\n    onShowManualRefreshButton?: (sender: AdaptiveApplet) => boolean;\n    onShowAuthCodeInputDialog?: (sender: AdaptiveApplet, request: IActivityRequest) => boolean;\n    onShowSigninPrompt?: (\n        sender: AdaptiveApplet,\n        request: IActivityRequest,\n        signinButton: AuthCardButton\n    ) => void;\n\n    constructor() {\n        this.renderedElement = document.createElement(\"div\");\n        this.renderedElement.className = \"aaf-cardHost\";\n        this.renderedElement.style.position = \"relative\";\n        this.renderedElement.style.display = \"flex\";\n        this.renderedElement.style.flexDirection = \"column\";\n\n        this._cardHostElement = document.createElement(\"div\");\n\n        this._refreshButtonHostElement = document.createElement(\"div\");\n        this._refreshButtonHostElement.className = \"aaf-refreshButtonHost\";\n        this._refreshButtonHostElement.style.display = \"none\";\n\n        this.renderedElement.appendChild(this._cardHostElement);\n        this.renderedElement.appendChild(this._refreshButtonHostElement);\n    }\n\n    refreshCard() {\n        if (this._card && this._card.refresh) {\n            this.internalExecuteAction(this._card.refresh.action, ActivityRequestTrigger.Manual, 0);\n        }\n    }\n\n    setCard(payload: any) {\n        this.internalSetCard(payload, 0);\n    }\n\n    get card(): AdaptiveCard | undefined {\n        return this._card;\n    }\n}\n"]}},"error":null,"hash":"c5e3622b4f65335b669220532e02bf48","cacheData":{"env":{}}}